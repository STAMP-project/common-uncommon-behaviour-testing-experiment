/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 04 12:54:24 GMT 2019
 */

package org.databene.jdbacl.sql.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.util.List;
import java.util.Map;
import org.antlr.runtime.BaseRecognizer;
import org.antlr.runtime.BitSet;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.DFA;
import org.antlr.runtime.IntStream;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.RecognizerSharedState;
import org.antlr.runtime.Token;
import org.databene.jdbacl.sql.parser.SQLLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLLexer_ESTest extends SQLLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(78).when(charStream0).getCharPositionInLine();
      doReturn(115).when(charStream0).getLine();
      doReturn(78, 78).when(charStream0).LA(anyInt());
      doReturn(115).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(115, sQLLexer0.getLine());
      assertEquals(78, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(43, SQLLexer.IN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(32, SQLLexer.AND);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(40, SQLLexer.LE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(41, SQLLexer.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mCOMMENT_TABLE();
      assertEquals(115, sQLLexer0.getLine());
      assertEquals(78, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(43, SQLLexer.IN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(32, SQLLexer.AND);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(40, SQLLexer.LE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(41, SQLLexer.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      
      try { 
        sQLLexer0.mT__94();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(64, SQLLexer.T__64);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__82();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      CharStream charStream0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";Rc3x");
      assertFalse(boolean0);
      
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(38, SQLLexer.GE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mIN();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      Map<Integer, Integer>[] mapArray0 = (Map<Integer, Integer>[]) Array.newInstance(Map.class, 3);
      mapArray0[0] = (Map<Integer, Integer>) null;
      mapArray0[1] = (Map<Integer, Integer>) null;
      mapArray0[2] = (Map<Integer, Integer>) null;
      recognizerSharedState0.ruleMemo = mapArray0;
      recognizerSharedState0.channel = (-1215);
      recognizerSharedState0.text = "A+Hl1s _8Q9O?Ut$EA";
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1215), recognizerSharedState0.channel);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(4, SQLLexer.INT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(37, SQLLexer.GT);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertNotNull(sQLLexer0);
      
      int int0 = sQLLexer0.getRuleMemoization(1, 0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1215), recognizerSharedState0.channel);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(4, SQLLexer.INT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(37, SQLLexer.GT);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals((-1), int0);
      
      try { 
        sQLLexer0.mLTGT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__122();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(87).when(charStream0).getCharPositionInLine();
      doReturn(87).when(charStream0).getLine();
      doReturn(92, 92).when(charStream0).LA(anyInt());
      doReturn((-892)).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(87, sQLLexer0.getLine());
      assertEquals(87, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(60, SQLLexer.WS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(37, SQLLexer.GT);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(41, SQLLexer.IS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(31, SQLLexer.OR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(39, SQLLexer.LT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertNotNull(sQLLexer0);
      
      int int0 = 961;
      int int1 = 70;
      try { 
        sQLLexer0.mPRIMARY();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream1).getCharPositionInLine();
      doReturn(0).when(charStream1).getLine();
      doReturn(0, 0).when(charStream1).LA(anyInt());
      doReturn(0).when(charStream1).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream1, recognizerSharedState1);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(32, SQLLexer.AND);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__125();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(charStream0).getCharPositionInLine();
      doReturn(1).when(charStream0).getLine();
      doReturn(1684, 1, 1684, 88, 0).when(charStream0).LA(anyInt());
      doReturn(236).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(1, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(1, sQLLexer0.getCharPositionInLine());
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(43, SQLLexer.IN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(60, SQLLexer.WS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mIDENTIFIER();
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(1, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(1, sQLLexer0.getCharPositionInLine());
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(43, SQLLexer.IN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(60, SQLLexer.WS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      
      try { 
        sQLLexer0.mSLASH();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(37, SQLLexer.GT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(60, SQLLexer.WS);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(4, SQLLexer.INT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__62();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(73, SQLLexer.T__73);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__98();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(4, SQLLexer.INT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertNotNull(sQLLexer0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer1 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(40, SQLLexer.LE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(32, SQLLexer.AND);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      try { 
        sQLLexer1.mT__99();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(2627).when(charStream0).getCharPositionInLine();
      doReturn(100).when(charStream0).getLine();
      doReturn(100, 100).when(charStream0).LA(anyInt());
      doReturn(2627).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(100, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(2627, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(37, SQLLexer.GT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(40, SQLLexer.LE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__68();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-4048)).when(charStream0).getCharPositionInLine();
      doReturn(1194).when(charStream0).getLine();
      doReturn(57, 749, (-4048), 1922, 0).when(charStream0).LA(anyInt());
      doReturn(1194).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals((-4048), sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(1194, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mINT();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals((-4048), sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(1194, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      
      try { 
        sQLLexer0.mT__90();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertNotNull(sQLLexer0);
      
      String string0 = sQLLexer0.getGrammarFileName();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(41, SQLLexer.IS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(37, SQLLexer.GT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(43, SQLLexer.IN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(39, SQLLexer.LT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(40, SQLLexer.LE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__94();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "extraneous input ");
      assertFalse(boolean0);
      
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(39, SQLLexer.LT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(43, SQLLexer.IN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(41, SQLLexer.IS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(40, SQLLexer.LE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mBYTE();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__128();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(135, SQLLexer.T__135);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(4, SQLLexer.INT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(40, SQLLexer.LE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(38, SQLLexer.GE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__73();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(39, SQLLexer.LT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(43, SQLLexer.IN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertNotNull(sQLLexer0);
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.line);
      assertNotNull(recognitionException0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mAND();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(37, SQLLexer.GT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertNotNull(sQLLexer0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.syntaxErrors = 115;
      SQLLexer sQLLexer1 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(115, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getLine());
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(115, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(32, SQLLexer.AND);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      try { 
        sQLLexer1.mT__61();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.syntaxErrors = 236;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(236, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(236, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(37, SQLLexer.GT);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(43, SQLLexer.IN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(60, SQLLexer.WS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mVARCHAR2();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(110, 146, 110, (-3052), (-3052)).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.text = "\"8p|";
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(146, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(146, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(37, SQLLexer.GT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertNotNull(sQLLexer0);
      
      recognizerSharedState0.tokenStartCharIndex = 389;
      recognizerSharedState0.backtracking = 75;
      sQLLexer0.mT__78();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertTrue(sQLLexer0.failed());
      assertEquals(146, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(146, sQLLexer0.getCharPositionInLine());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(78, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(37, SQLLexer.GT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      
      sQLLexer0.mGE();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertTrue(sQLLexer0.failed());
      assertEquals(146, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(146, sQLLexer0.getCharPositionInLine());
      assertEquals(38, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(37, SQLLexer.GT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      
      sQLLexer0.mQUOTED_NAME();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertTrue(sQLLexer0.failed());
      assertEquals(146, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(146, sQLLexer0.getCharPositionInLine());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals(8, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(37, SQLLexer.GT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      
      sQLLexer0.mT__67();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertTrue(sQLLexer0.failed());
      assertEquals(146, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(146, sQLLexer0.getCharPositionInLine());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(67, recognizerSharedState0.type);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(37, SQLLexer.GT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      List<String> list0 = BaseRecognizer.getRuleInvocationStack((Throwable) mockThrowable0, "M0ZnE,D'%Shs*,n");
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains("M0ZnE,D'%Shs*,n"));
      assertNotNull(list0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      RecognizerSharedState recognizerSharedState2 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(67, recognizerSharedState0.type);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(389, recognizerSharedState2.tokenStartCharIndex);
      assertEquals(67, recognizerSharedState2.type);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertTrue(recognizerSharedState2.failed);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals(75, recognizerSharedState2.backtracking);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState2);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer1 = new SQLLexer(charStream1, recognizerSharedState0);
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertTrue(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals(75, sQLLexer1.getBacktrackingLevel());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(67, recognizerSharedState0.type);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(41, SQLLexer.IS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(31, SQLLexer.OR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState2));
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      sQLLexer0.mIS();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertTrue(sQLLexer0.failed());
      assertEquals(146, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(146, sQLLexer0.getCharPositionInLine());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals(41, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(37, SQLLexer.GT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState2));
      assertFalse(sQLLexer0.equals((Object)sQLLexer1));
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState0, recognizerSharedState2);
      assertNotSame(sQLLexer0, sQLLexer1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertNotNull(sQLLexer0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer1 = new SQLLexer(charStream0);
      assertFalse(sQLLexer1.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(41, SQLLexer.IS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(32, SQLLexer.AND);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(60, SQLLexer.WS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      sQLLexer1.mTABLE_DETAILS();
      assertFalse(sQLLexer1.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(41, SQLLexer.IS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(32, SQLLexer.AND);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(60, SQLLexer.WS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotSame(sQLLexer1, sQLLexer0);
      
      try { 
        sQLLexer1.mT__127();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(4, SQLLexer.INT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertNotNull(sQLLexer0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer1 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertFalse(sQLLexer1.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(4, SQLLexer.INT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(39, SQLLexer.LT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(41, SQLLexer.IS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      try { 
        sQLLexer1.mBARBAR();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(40, SQLLexer.LE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mXOR();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(109, SQLLexer.T__109);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__93();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(40, SQLLexer.LE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mCHAR();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(charStream0).getCharPositionInLine();
      doReturn(102).when(charStream0).getLine();
      doReturn(3253, 3).when(charStream0).LA(anyInt());
      doReturn(102).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertFalse(sQLLexer0.failed());
      assertEquals(102, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(3, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(37, SQLLexer.GT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(40, SQLLexer.LE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(11, SQLLexer.COMMENT);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mINT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(38, SQLLexer.GE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(41, SQLLexer.IS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(43, SQLLexer.IN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(60, SQLLexer.WS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(32, SQLLexer.AND);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__119();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(38, SQLLexer.GE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(32, SQLLexer.AND);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(41, SQLLexer.IS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__111();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__127();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(41, SQLLexer.IS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mNULL();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(60, SQLLexer.WS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(43, SQLLexer.IN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(41, SQLLexer.IS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mSTRING();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(32, SQLLexer.AND);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__62();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-3133)).when(charStream0).getCharPositionInLine();
      doReturn((-3133)).when(charStream0).getLine();
      doReturn((-1044), (-3133)).when(charStream0).LA(anyInt());
      doReturn(1597).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals((-3133), sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals((-3133), sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(37, SQLLexer.GT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(41, SQLLexer.IS);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(43, SQLLexer.IN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(60, SQLLexer.WS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__71();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(41, SQLLexer.IS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(37, SQLLexer.GT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(4, SQLLexer.INT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertNotNull(sQLLexer0);
      
      recognizerSharedState0.tokenStartCharIndex = 109;
      try { 
        sQLLexer0.mIS();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, (RecognizerSharedState) null);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(4, SQLLexer.INT);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__133();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(charStream0).getCharPositionInLine();
      doReturn(2).when(charStream0).getLine();
      doReturn(110, 2, 110, (-3052), (-3052)).when(charStream0).LA(anyInt());
      doReturn(72, 0).when(charStream0).index();
      doReturn(0).when(charStream0).mark();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.text = "\"8p|";
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(2, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(2, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(103, SQLLexer.T__103);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(31, SQLLexer.OR);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(41, SQLLexer.IS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertNotNull(sQLLexer0);
      
      recognizerSharedState0.tokenStartCharIndex = 389;
      recognizerSharedState0.backtracking = 75;
      sQLLexer0.mT__78();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(2, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertTrue(sQLLexer0.failed());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(2, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(78, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(103, SQLLexer.T__103);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(31, SQLLexer.OR);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(41, SQLLexer.IS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      
      sQLLexer0.mGE();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(2, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertTrue(sQLLexer0.failed());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(2, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(38, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(103, SQLLexer.T__103);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(31, SQLLexer.OR);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(41, SQLLexer.IS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      
      sQLLexer0.mQUOTED_NAME();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(2, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertTrue(sQLLexer0.failed());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(2, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(8, recognizerSharedState0.type);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(103, SQLLexer.T__103);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(31, SQLLexer.OR);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(41, SQLLexer.IS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      
      recognizerSharedState0.syntaxErrors = 21;
      sQLLexer0.mT__78();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(2, sQLLexer0.getLine());
      assertEquals(21, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertTrue(sQLLexer0.failed());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(2, sQLLexer0.getCharPositionInLine());
      assertEquals(78, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(21, recognizerSharedState0.syntaxErrors);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(103, SQLLexer.T__103);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(31, SQLLexer.OR);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(41, SQLLexer.IS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      
      sQLLexer0.mT__67();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(2, sQLLexer0.getLine());
      assertEquals(21, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertTrue(sQLLexer0.failed());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(2, sQLLexer0.getCharPositionInLine());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(21, recognizerSharedState0.syntaxErrors);
      assertEquals(67, recognizerSharedState0.type);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(103, SQLLexer.T__103);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(31, SQLLexer.OR);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(41, SQLLexer.IS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      
      CommonToken commonToken0 = (CommonToken)sQLLexer0.nextToken();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(2, sQLLexer0.getLine());
      assertEquals(21, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertTrue(sQLLexer0.failed());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(2, sQLLexer0.getCharPositionInLine());
      assertEquals(2, commonToken0.getLine());
      assertEquals(71, commonToken0.getStopIndex());
      assertEquals(67, commonToken0.getType());
      assertEquals(2, commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(72, commonToken0.getStartIndex());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(2, recognizerSharedState0.tokenStartLine);
      assertEquals(21, recognizerSharedState0.syntaxErrors);
      assertEquals(72, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(67, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(2, recognizerSharedState0.tokenStartCharPositionInLine);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(103, SQLLexer.T__103);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(31, SQLLexer.OR);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(41, SQLLexer.IS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertNotNull(commonToken0);
      
      sQLLexer0.reset();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(2, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(2, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(103, SQLLexer.T__103);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(31, SQLLexer.OR);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(41, SQLLexer.IS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream1).getCharPositionInLine();
      doReturn(0).when(charStream1).getLine();
      doReturn(0, 0).when(charStream1).LA(anyInt());
      doReturn(0).when(charStream1).index();
      recognizerSharedState0.lastErrorIndex = 75;
      SQLLexer sQLLexer1 = new SQLLexer(charStream1, recognizerSharedState0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(75, recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      try { 
        sQLLexer1.mT__115();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, (RecognizerSharedState) null);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(4, SQLLexer.INT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(37, SQLLexer.GT);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertNotNull(sQLLexer0);
      
      String string0 = "TmW0e:}EX7tIzCII.7p";
      try { 
        sQLLexer0.mPERCENT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(32, SQLLexer.AND);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(38, SQLLexer.GE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(31, SQLLexer.OR);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(40, SQLLexer.LE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(37, SQLLexer.GT);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__74();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(84).when(charStream0).getCharPositionInLine();
      doReturn(84).when(charStream0).getLine();
      doReturn(64, 113).when(charStream0).LA(anyInt());
      doReturn(164).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(84, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(84, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(40, SQLLexer.LE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__105();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(43, SQLLexer.IN);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(38, SQLLexer.GE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(40, SQLLexer.LE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertNotNull(sQLLexer0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      RecognizerSharedState recognizerSharedState2 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertFalse(recognizerSharedState2.failed);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState2);
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertNotNull(recognitionException0);
      
      RecognitionException recognitionException1 = new RecognitionException();
      assertEquals(0, recognitionException1.line);
      assertEquals(0, recognitionException1.c);
      assertFalse(recognitionException1.approximateLineInfo);
      assertEquals(0, recognitionException1.charPositionInLine);
      assertEquals(0, recognitionException1.index);
      assertFalse(recognitionException1.equals((Object)recognitionException0));
      assertNotNull(recognitionException1);
      
      recognitionException1.index = 493;
      String string0 = recognitionException1.getLocalizedMessage();
      assertEquals(0, recognitionException1.line);
      assertEquals(0, recognitionException1.c);
      assertFalse(recognitionException1.approximateLineInfo);
      assertEquals(493, recognitionException1.index);
      assertEquals(0, recognitionException1.charPositionInLine);
      assertFalse(recognitionException1.equals((Object)recognitionException0));
      assertNotSame(recognitionException1, recognitionException0);
      assertNull(string0);
      
      List<String> list0 = BaseRecognizer.getRuleInvocationStack((Throwable) recognitionException0, (String) null);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertFalse(recognitionException0.equals((Object)recognitionException1));
      assertNotSame(recognitionException0, recognitionException1);
      assertNotNull(list0);
      
      try { 
        sQLLexer0.mT__120();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(31, SQLLexer.OR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__72();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-2347), (-2347), (-2347), 81, 95).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.text = "\"8p|";
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(118, SQLLexer.T__118);
      assertNotNull(sQLLexer0);
      
      recognizerSharedState0.tokenStartCharIndex = 389;
      recognizerSharedState0.backtracking = 75;
      sQLLexer0.mT__78();
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(78, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(118, SQLLexer.T__118);
      
      sQLLexer0.mQUOTED_NAME();
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(8, recognizerSharedState0.type);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(118, SQLLexer.T__118);
      
      recognizerSharedState0.lastErrorIndex = 21;
      sQLLexer0.mT__67();
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(67, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(21, recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(118, SQLLexer.T__118);
      
      sQLLexer0.mDEFAULT();
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(10, recognizerSharedState0.type);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(21, recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(118, SQLLexer.T__118);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer1 = new SQLLexer(charStream1, recognizerSharedState0);
      assertTrue(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals(75, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(10, recognizerSharedState0.type);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(21, recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(4, SQLLexer.INT);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(40, SQLLexer.LE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(32, SQLLexer.AND);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(41, SQLLexer.IS);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      CharStream charStream2 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer2 = new SQLLexer(charStream2);
      assertEquals(0, sQLLexer2.getLine());
      assertEquals(0, sQLLexer2.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer2.getGrammarFileName());
      assertEquals(0, sQLLexer2.getBacktrackingLevel());
      assertFalse(sQLLexer2.failed());
      assertEquals(0, sQLLexer2.getCharPositionInLine());
      assertEquals(0, sQLLexer2.getNumberOfSyntaxErrors());
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(39, SQLLexer.LT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertFalse(sQLLexer2.equals((Object)sQLLexer0));
      assertFalse(sQLLexer2.equals((Object)sQLLexer1));
      assertNotNull(sQLLexer2);
      
      SQLLexer.DFA9 sQLLexer_DFA9_0 = sQLLexer1.new DFA9(sQLLexer2);
      assertTrue(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals(75, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer2.getLine());
      assertEquals(0, sQLLexer2.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer2.getGrammarFileName());
      assertEquals(0, sQLLexer2.getBacktrackingLevel());
      assertFalse(sQLLexer2.failed());
      assertEquals(0, sQLLexer2.getCharPositionInLine());
      assertEquals(0, sQLLexer2.getNumberOfSyntaxErrors());
      assertEquals("1:1: Tokens : ( T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | T__88 | T__89 | T__90 | T__91 | T__92 | T__93 | T__94 | T__95 | T__96 | T__97 | T__98 | T__99 | T__100 | T__101 | T__102 | T__103 | T__104 | T__105 | T__106 | T__107 | T__108 | T__109 | T__110 | T__111 | T__112 | T__113 | T__114 | T__115 | T__116 | T__117 | T__118 | T__119 | T__120 | T__121 | T__122 | T__123 | T__124 | T__125 | T__126 | T__127 | T__128 | T__129 | T__130 | T__131 | T__132 | T__133 | T__134 | T__135 | T__136 | T__137 | OR | AND | XOR | EQ | BANGEQ | LTGT | GT | GE | LT | LE | IS | NOT | NULL | IN | BETWEEN | PLUS | SUB | STAR | SLASH | PERCENT | BARBAR | ROWID | NUMBER | VARCHAR2 | NVARCHAR2 | BYTE | CHAR | DATE | TIMESTAMP | BEFORE | PRIMARY | DEFAULT | IDENTIFIER | INT | COMMENT | WS | STRING | QUOTED_NAME );", sQLLexer_DFA9_0.getDescription());
      assertEquals(10, recognizerSharedState0.type);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(21, recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(4, SQLLexer.INT);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(40, SQLLexer.LE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(32, SQLLexer.AND);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(41, SQLLexer.IS);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(39, SQLLexer.LT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertFalse(DFA.debug);
      assertFalse(sQLLexer1.equals((Object)sQLLexer2));
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertFalse(sQLLexer2.equals((Object)sQLLexer0));
      assertFalse(sQLLexer2.equals((Object)sQLLexer1));
      assertNotNull(sQLLexer_DFA9_0);
      
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(intStream0).LA(anyInt());
      doReturn(0).when(intStream0).index();
      doReturn(0).when(intStream0).mark();
      try { 
        sQLLexer_DFA9_0.predict(intStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.DFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(4, SQLLexer.INT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(40, SQLLexer.LE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__78();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(4, SQLLexer.INT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__98();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      recognizerSharedState1.token = null;
      recognizerSharedState1._fsp = 0;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__93();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(37, SQLLexer.GT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(43, SQLLexer.IN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(60, SQLLexer.WS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__79();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(167).when(charStream0).getCharPositionInLine();
      doReturn(167).when(charStream0).getLine();
      doReturn(2874, 167).when(charStream0).LA(anyInt());
      doReturn(167).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(167, sQLLexer0.getLine());
      assertEquals(167, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(37, SQLLexer.GT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mCOMMENT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intStream0).LA(anyInt());
      doReturn(0).when(intStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(37, SQLLexer.GT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertNotNull(sQLLexer0);
      
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertNotNull(recognitionException0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mWS();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mXOR();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__102();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(83, SQLLexer.T__83);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__102();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(41, SQLLexer.IS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertNotNull(sQLLexer0);
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.index);
      assertNotNull(recognitionException0);
      
      RecognitionException recognitionException1 = new RecognitionException();
      assertEquals(0, recognitionException1.index);
      assertEquals(0, recognitionException1.charPositionInLine);
      assertEquals(0, recognitionException1.c);
      assertEquals(0, recognitionException1.line);
      assertFalse(recognitionException1.approximateLineInfo);
      assertFalse(recognitionException1.equals((Object)recognitionException0));
      assertNotNull(recognitionException1);
      
      String string0 = recognitionException1.getLocalizedMessage();
      assertEquals(0, recognitionException1.index);
      assertEquals(0, recognitionException1.charPositionInLine);
      assertEquals(0, recognitionException1.c);
      assertEquals(0, recognitionException1.line);
      assertFalse(recognitionException1.approximateLineInfo);
      assertFalse(recognitionException1.equals((Object)recognitionException0));
      assertNotSame(recognitionException1, recognitionException0);
      assertNull(string0);
      
      List<String> list0 = BaseRecognizer.getRuleInvocationStack((Throwable) recognitionException0, (String) null);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.index);
      assertFalse(recognitionException0.equals((Object)recognitionException1));
      assertNotSame(recognitionException0, recognitionException1);
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mSLASH();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(1781).when(charStream0).getCharPositionInLine();
      doReturn(1781).when(charStream0).getLine();
      doReturn(2750, 2750).when(charStream0).LA(anyInt());
      doReturn(2750).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(1781, sQLLexer0.getLine());
      assertEquals(1781, sQLLexer0.getCharPositionInLine());
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(60, SQLLexer.WS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(32, SQLLexer.AND);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(4, SQLLexer.INT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.traceIn(",\"5tpxSN$.`{ 6*", 1781, ",\"5tpxSN$.`{ 6*");
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(1781, sQLLexer0.getLine());
      assertEquals(1781, sQLLexer0.getCharPositionInLine());
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(60, SQLLexer.WS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(32, SQLLexer.AND);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(4, SQLLexer.INT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      
      try { 
        sQLLexer0.mSTRING();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(39, SQLLexer.LT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(4, SQLLexer.INT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(43, SQLLexer.IN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__129();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn((String) null).when(charStream0).getSourceName();
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(37, SQLLexer.GT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(38, SQLLexer.GE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertNotNull(sQLLexer0);
      
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intStream0).LA(anyInt());
      doReturn(0).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertNotNull(recognitionException0);
      
      String string0 = sQLLexer0.getErrorHeader(recognitionException0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(37, SQLLexer.GT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(38, SQLLexer.GE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals("line 0:0", string0);
      assertNotNull(string0);
      
      try { 
        sQLLexer0.mT__63();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(40, SQLLexer.LE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(43, SQLLexer.IN);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(39, SQLLexer.LT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__69();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(60, SQLLexer.WS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__130();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(360, 360).when(charStream0).getCharPositionInLine();
      doReturn(520, 2373).when(charStream0).getLine();
      doReturn(520, 108, 57, 0, 0).when(charStream0).LA(anyInt());
      doReturn("\u0001\u008E", (String) null).when(charStream0).getSourceName();
      doReturn(2373, 2373).when(charStream0).index();
      doReturn(108).when(charStream0).mark();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.failed = true;
      recognizerSharedState0.tokenStartCharIndex = 3143;
      recognizerSharedState0.text = "extraneous input ";
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(520, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(360, sQLLexer0.getCharPositionInLine());
      assertTrue(sQLLexer0.failed());
      assertFalse(recognizerSharedState0.errorRecovery);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(3143, recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(40, SQLLexer.LE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SQLLexer error
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(43, SQLLexer.IN);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(39, SQLLexer.LT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(38, SQLLexer.GE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(40, SQLLexer.LE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__114();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(505).when(charStream0).getCharPositionInLine();
      doReturn(505).when(charStream0).getLine();
      doReturn(182, 505).when(charStream0).LA(anyInt());
      doReturn(459).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(505, sQLLexer0.getLine());
      assertEquals(505, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(63, SQLLexer.T__63);
      assertEquals(39, SQLLexer.LT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(41, SQLLexer.IS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(37, SQLLexer.GT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(4, SQLLexer.INT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__121();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(37, SQLLexer.GT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(85, SQLLexer.T__85);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mBEFORE();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(110).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.text = "\"8p|";
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(1249, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(2, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(39, SQLLexer.LT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(32, SQLLexer.AND);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertNotNull(sQLLexer0);
      
      recognizerSharedState0.tokenStartCharIndex = 389;
      recognizerSharedState0.backtracking = 75;
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer1 = new SQLLexer(charStream1);
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(37, SQLLexer.GT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(60, SQLLexer.WS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      sQLLexer0.mT__93();
      assertEquals(1249, sQLLexer0.getCharPositionInLine());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(2, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(93, recognizerSharedState0.type);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(39, SQLLexer.LT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(32, SQLLexer.AND);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertFalse(sQLLexer0.equals((Object)sQLLexer1));
      assertNotSame(sQLLexer0, sQLLexer1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(32, SQLLexer.AND);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(84, SQLLexer.T__84);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertNotNull(sQLLexer0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer1 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(60, SQLLexer.WS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(40, SQLLexer.LE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      try { 
        sQLLexer1.mINT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(charStream0).getCharPositionInLine();
      doReturn(0, 0).when(charStream0).getLine();
      doReturn(0, 0, 0).when(charStream0).LA(anyInt());
      doReturn((String) null).when(charStream0).getSourceName();
      doReturn(0, 0).when(charStream0).index();
      doReturn(0).when(charStream0).mark();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(4, SQLLexer.INT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(60, SQLLexer.WS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SQLLexer error
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(67, SQLLexer.T__67);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__90();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(39, SQLLexer.LT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(4, SQLLexer.INT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__134();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(77, SQLLexer.T__77);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__122();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertNotNull(sQLLexer0);
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertNotNull(recognitionException0);
      
      recognitionException0.line = 31;
      recognitionException0.printStackTrace();
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(31, recognitionException0.line);
      
      Throwable throwable0 = recognitionException0.initCause((Throwable) null);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable0.toString());
      assertNull(throwable0.getMessage());
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(31, recognitionException0.line);
      assertNotNull(throwable0);
      
      recognitionException0.printStackTrace();
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(31, recognitionException0.line);
      
      recognitionException0.approximateLineInfo = true;
      // Undeclared exception!
      try { 
        sQLLexer0.mT__92();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(277, 277).when(charStream0).getCharPositionInLine();
      doReturn((-2), 277).when(charStream0).getLine();
      doReturn(3952, 1576, 212, 160, 2).when(charStream0).LA(anyInt());
      doReturn(99, 307, 73, 2, 99).when(charStream0).index();
      doReturn(307, 1576).when(charStream0).mark();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.backtracking = 100;
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertEquals((-2), sQLLexer0.getLine());
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(277, sQLLexer0.getCharPositionInLine());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mT__64();
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(277, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(277, sQLLexer0.getCharPositionInLine());
      assertTrue(sQLLexer0.failed());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(64, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      
      CommonToken commonToken0 = (CommonToken)sQLLexer0.nextToken();
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(277, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(277, sQLLexer0.getCharPositionInLine());
      assertTrue(sQLLexer0.failed());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(277, commonToken0.getLine());
      assertEquals(64, commonToken0.getType());
      assertEquals(277, commonToken0.getCharPositionInLine());
      assertEquals(99, commonToken0.getStartIndex());
      assertEquals(306, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertEquals(277, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(64, recognizerSharedState1.type);
      assertEquals(277, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(99, recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      assertNotNull(commonToken0);
      
      recognizerSharedState1.channel = 74;
      sQLLexer0.mAND();
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(277, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(277, sQLLexer0.getCharPositionInLine());
      assertTrue(sQLLexer0.failed());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertEquals(277, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(32, recognizerSharedState1.type);
      assertEquals(277, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(99, recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      
      recognizerSharedState1.lastErrorIndex = 99;
      recognizerSharedState1.tokenStartCharPositionInLine = 77;
      CommonToken commonToken1 = (CommonToken)sQLLexer0.emit();
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(277, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(277, sQLLexer0.getCharPositionInLine());
      assertTrue(sQLLexer0.failed());
      assertEquals((-1), commonToken1.getTokenIndex());
      assertEquals(77, commonToken1.getCharPositionInLine());
      assertEquals(277, commonToken1.getLine());
      assertEquals(72, commonToken1.getStopIndex());
      assertEquals(99, commonToken1.getStartIndex());
      assertEquals(0, commonToken1.getChannel());
      assertEquals(32, commonToken1.getType());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertEquals(99, recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(32, recognizerSharedState1.type);
      assertEquals(277, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(77, recognizerSharedState1.tokenStartCharPositionInLine);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(99, recognizerSharedState1.tokenStartCharIndex);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(commonToken1.equals((Object)commonToken0));
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      assertNotSame(commonToken1, commonToken0);
      assertNotNull(commonToken1);
      
      CommonToken commonToken2 = (CommonToken)sQLLexer0.nextToken();
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(277, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(277, sQLLexer0.getCharPositionInLine());
      assertTrue(sQLLexer0.failed());
      assertEquals(32, commonToken2.getType());
      assertEquals(277, commonToken2.getLine());
      assertEquals(98, commonToken2.getStopIndex());
      assertEquals(277, commonToken2.getCharPositionInLine());
      assertEquals(2, commonToken2.getStartIndex());
      assertEquals(0, commonToken2.getChannel());
      assertEquals((-1), commonToken2.getTokenIndex());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertEquals(99, recognizerSharedState1.lastErrorIndex);
      assertEquals(277, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(32, recognizerSharedState1.type);
      assertEquals(277, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(2, recognizerSharedState1.tokenStartCharIndex);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(commonToken2.equals((Object)commonToken1));
      assertFalse(commonToken2.equals((Object)commonToken0));
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      assertNotSame(commonToken2, commonToken1);
      assertNotSame(commonToken2, commonToken0);
      assertNotNull(commonToken2);
      
      sQLLexer0.mINVOCATION();
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(277, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(277, sQLLexer0.getCharPositionInLine());
      assertTrue(sQLLexer0.failed());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertEquals(99, recognizerSharedState1.lastErrorIndex);
      assertEquals(277, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(32, recognizerSharedState1.type);
      assertEquals(277, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(2, recognizerSharedState1.tokenStartCharIndex);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      
      sQLLexer0.mPRIMARY();
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(277, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(277, sQLLexer0.getCharPositionInLine());
      assertTrue(sQLLexer0.failed());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(9, recognizerSharedState1.type);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertEquals(99, recognizerSharedState1.lastErrorIndex);
      assertEquals(277, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(277, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(2, recognizerSharedState1.tokenStartCharIndex);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      
      sQLLexer0.mT__97();
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(277, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(277, sQLLexer0.getCharPositionInLine());
      assertTrue(sQLLexer0.failed());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertEquals(99, recognizerSharedState1.lastErrorIndex);
      assertEquals(277, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(97, recognizerSharedState1.type);
      assertEquals(277, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(2, recognizerSharedState1.tokenStartCharIndex);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      
      sQLLexer0.mT__116();
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(277, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(277, sQLLexer0.getCharPositionInLine());
      assertTrue(sQLLexer0.failed());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertEquals(99, recognizerSharedState1.lastErrorIndex);
      assertEquals(277, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(277, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(2, recognizerSharedState1.tokenStartCharIndex);
      assertEquals(116, recognizerSharedState1.type);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      
      sQLLexer0.mT__108();
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(277, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(277, sQLLexer0.getCharPositionInLine());
      assertTrue(sQLLexer0.failed());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertEquals(99, recognizerSharedState1.lastErrorIndex);
      assertEquals(108, recognizerSharedState1.type);
      assertEquals(277, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(277, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(2, recognizerSharedState1.tokenStartCharIndex);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      
      int int0 = 0;
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(93, 89).when(intStream0).LA(anyInt());
      doReturn(32).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(32, recognitionException0.index);
      assertEquals(93, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertNotNull(recognitionException0);
      
      BitSet bitSet0 = BitSet.of(447, 0, 7);
      assertEquals(7, bitSet0.lengthInLongWords());
      assertEquals(448, bitSet0.numBits());
      assertEquals(3, bitSet0.size());
      assertFalse(bitSet0.isNil());
      assertNotNull(bitSet0);
      
      try { 
        sQLLexer0.recoverFromMismatchedSet(intStream0, recognitionException0, bitSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      BitSet[] bitSetArray0 = new BitSet[0];
      recognizerSharedState0.following = bitSetArray0;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(37, SQLLexer.GT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mBEFORE();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(4, SQLLexer.INT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(31, SQLLexer.OR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(39, SQLLexer.LT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(43, SQLLexer.IN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(60, SQLLexer.WS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertNotNull(sQLLexer0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer1 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(31, SQLLexer.OR);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(41, SQLLexer.IS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(114, SQLLexer.T__114);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(37, SQLLexer.GT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(4, SQLLexer.INT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      sQLLexer1.mORA_CONFIGS();
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(31, SQLLexer.OR);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(41, SQLLexer.IS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(114, SQLLexer.T__114);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(37, SQLLexer.GT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(4, SQLLexer.INT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotSame(sQLLexer1, sQLLexer0);
      
      try { 
        sQLLexer1.mSTAR();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__118();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(39, SQLLexer.LT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(32, SQLLexer.AND);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(38, SQLLexer.GE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__103();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(1305).when(charStream0).getCharPositionInLine();
      doReturn(1305).when(charStream0).getLine();
      doReturn(1305, 1305).when(charStream0).LA(anyInt());
      doReturn(3207).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(1305, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(1305, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(4, SQLLexer.INT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mIN();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0, 0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertNotNull(sQLLexer0);
      
      CommonToken commonToken0 = (CommonToken)sQLLexer0.emit();
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertNotNull(commonToken0);
      
      try { 
        sQLLexer0.mTIMESTAMP();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(37, SQLLexer.GT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(4, SQLLexer.INT);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertNotNull(sQLLexer0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mIDENTIFIER();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(37, SQLLexer.GT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(43, SQLLexer.IN);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mNUMBER();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(109, SQLLexer.T__109);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(37, SQLLexer.GT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertNotNull(sQLLexer0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sQLLexer0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(43, SQLLexer.IN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__88();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(41, SQLLexer.IS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(39, SQLLexer.LT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mLT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(39, SQLLexer.LT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(31, SQLLexer.OR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__72();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__74();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(37, SQLLexer.GT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertNotNull(sQLLexer0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        sQLLexer0.mT__132();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(60, SQLLexer.WS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(39, SQLLexer.LT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__130();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(43, SQLLexer.IN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(74, SQLLexer.T__74);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(4, SQLLexer.INT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(41, SQLLexer.IS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(39, SQLLexer.LT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mINT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream1).getCharPositionInLine();
      doReturn(0).when(charStream1).getLine();
      doReturn(0, 0).when(charStream1).LA(anyInt());
      doReturn(0).when(charStream1).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream1);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(43, SQLLexer.IN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(4, SQLLexer.INT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(40, SQLLexer.LE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(37, SQLLexer.GT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(60, SQLLexer.WS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mDATE();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(41, SQLLexer.IS);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(40, SQLLexer.LE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__71();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(37, SQLLexer.GT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(4, SQLLexer.INT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(43, SQLLexer.IN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__85();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(60, SQLLexer.WS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(31, SQLLexer.OR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(39, SQLLexer.LT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__100();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(425).when(charStream0).getCharPositionInLine();
      doReturn(81).when(charStream0).getLine();
      doReturn(81, 81).when(charStream0).LA(anyInt());
      doReturn(81).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(425, sQLLexer0.getCharPositionInLine());
      assertEquals(81, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(47, SQLLexer.STAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(4, SQLLexer.INT);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(39, SQLLexer.LT);
      assertEquals(66, SQLLexer.T__66);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__117();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(215).when(charStream0).getCharPositionInLine();
      doReturn(215).when(charStream0).getLine();
      doReturn(47, 215, 9, 215, 0).when(charStream0).LA(anyInt());
      doReturn(112).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(215, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(215, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(43, SQLLexer.IN);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(41, SQLLexer.IS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(74, SQLLexer.T__74);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mWS();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mNUMBER();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(37, SQLLexer.GT);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(39, SQLLexer.LT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(31, SQLLexer.OR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__123();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-2347), (-2347), (-1250), 81, 95).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.text = "\"8p|";
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(31, SQLLexer.OR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(32, SQLLexer.AND);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertNotNull(sQLLexer0);
      
      recognizerSharedState0.tokenStartCharIndex = 389;
      recognizerSharedState0.backtracking = 75;
      sQLLexer0.mT__78();
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(78, recognizerSharedState0.type);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(31, SQLLexer.OR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(32, SQLLexer.AND);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      
      sQLLexer0.mQUOTED_NAME();
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(8, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(31, SQLLexer.OR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(32, SQLLexer.AND);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      
      recognizerSharedState0.lastErrorIndex = 21;
      sQLLexer0.mT__67();
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(67, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(21, recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(31, SQLLexer.OR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(32, SQLLexer.AND);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      
      sQLLexer0.mDEFAULT();
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(10, recognizerSharedState0.type);
      assertEquals(21, recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(31, SQLLexer.OR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(32, SQLLexer.AND);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream1).LA(anyInt());
      SQLLexer sQLLexer1 = new SQLLexer(charStream1, recognizerSharedState0);
      assertEquals(75, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertTrue(sQLLexer1.failed());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(10, recognizerSharedState0.type);
      assertEquals(21, recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(40, SQLLexer.LE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(60, SQLLexer.WS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(39, SQLLexer.LT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(41, SQLLexer.IS);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      CharStream charStream2 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream2).getCharPositionInLine();
      doReturn(0).when(charStream2).getLine();
      doReturn(0, 0).when(charStream2).LA(anyInt());
      doReturn(0).when(charStream2).index();
      SQLLexer sQLLexer2 = new SQLLexer(charStream2);
      assertFalse(sQLLexer2.failed());
      assertEquals(0, sQLLexer2.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer2.getGrammarFileName());
      assertEquals(0, sQLLexer2.getCharPositionInLine());
      assertEquals(0, sQLLexer2.getLine());
      assertEquals(0, sQLLexer2.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer2.getBacktrackingLevel());
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(4, SQLLexer.INT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(40, SQLLexer.LE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(41, SQLLexer.IS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(31, SQLLexer.OR);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(38, SQLLexer.GE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(39, SQLLexer.LT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertFalse(sQLLexer2.equals((Object)sQLLexer1));
      assertFalse(sQLLexer2.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer2);
      
      SQLLexer.DFA9 sQLLexer_DFA9_0 = sQLLexer1.new DFA9(sQLLexer2);
      assertEquals(75, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertTrue(sQLLexer1.failed());
      assertFalse(sQLLexer2.failed());
      assertEquals(0, sQLLexer2.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer2.getGrammarFileName());
      assertEquals(0, sQLLexer2.getCharPositionInLine());
      assertEquals(0, sQLLexer2.getLine());
      assertEquals(0, sQLLexer2.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer2.getBacktrackingLevel());
      assertEquals("1:1: Tokens : ( T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | T__88 | T__89 | T__90 | T__91 | T__92 | T__93 | T__94 | T__95 | T__96 | T__97 | T__98 | T__99 | T__100 | T__101 | T__102 | T__103 | T__104 | T__105 | T__106 | T__107 | T__108 | T__109 | T__110 | T__111 | T__112 | T__113 | T__114 | T__115 | T__116 | T__117 | T__118 | T__119 | T__120 | T__121 | T__122 | T__123 | T__124 | T__125 | T__126 | T__127 | T__128 | T__129 | T__130 | T__131 | T__132 | T__133 | T__134 | T__135 | T__136 | T__137 | OR | AND | XOR | EQ | BANGEQ | LTGT | GT | GE | LT | LE | IS | NOT | NULL | IN | BETWEEN | PLUS | SUB | STAR | SLASH | PERCENT | BARBAR | ROWID | NUMBER | VARCHAR2 | NVARCHAR2 | BYTE | CHAR | DATE | TIMESTAMP | BEFORE | PRIMARY | DEFAULT | IDENTIFIER | INT | COMMENT | WS | STRING | QUOTED_NAME );", sQLLexer_DFA9_0.getDescription());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(10, recognizerSharedState0.type);
      assertEquals(21, recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(40, SQLLexer.LE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(60, SQLLexer.WS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(39, SQLLexer.LT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(41, SQLLexer.IS);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(4, SQLLexer.INT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(40, SQLLexer.LE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(41, SQLLexer.IS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(31, SQLLexer.OR);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(38, SQLLexer.GE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(39, SQLLexer.LT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertFalse(DFA.debug);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertFalse(sQLLexer1.equals((Object)sQLLexer2));
      assertFalse(sQLLexer2.equals((Object)sQLLexer1));
      assertFalse(sQLLexer2.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer_DFA9_0);
      
      String string0 = sQLLexer_DFA9_0.getDescription();
      assertEquals(75, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertTrue(sQLLexer1.failed());
      assertFalse(sQLLexer2.failed());
      assertEquals(0, sQLLexer2.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer2.getGrammarFileName());
      assertEquals(0, sQLLexer2.getCharPositionInLine());
      assertEquals(0, sQLLexer2.getLine());
      assertEquals(0, sQLLexer2.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer2.getBacktrackingLevel());
      assertEquals("1:1: Tokens : ( T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | T__88 | T__89 | T__90 | T__91 | T__92 | T__93 | T__94 | T__95 | T__96 | T__97 | T__98 | T__99 | T__100 | T__101 | T__102 | T__103 | T__104 | T__105 | T__106 | T__107 | T__108 | T__109 | T__110 | T__111 | T__112 | T__113 | T__114 | T__115 | T__116 | T__117 | T__118 | T__119 | T__120 | T__121 | T__122 | T__123 | T__124 | T__125 | T__126 | T__127 | T__128 | T__129 | T__130 | T__131 | T__132 | T__133 | T__134 | T__135 | T__136 | T__137 | OR | AND | XOR | EQ | BANGEQ | LTGT | GT | GE | LT | LE | IS | NOT | NULL | IN | BETWEEN | PLUS | SUB | STAR | SLASH | PERCENT | BARBAR | ROWID | NUMBER | VARCHAR2 | NVARCHAR2 | BYTE | CHAR | DATE | TIMESTAMP | BEFORE | PRIMARY | DEFAULT | IDENTIFIER | INT | COMMENT | WS | STRING | QUOTED_NAME );", sQLLexer_DFA9_0.getDescription());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(10, recognizerSharedState0.type);
      assertEquals(21, recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(40, SQLLexer.LE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(60, SQLLexer.WS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(39, SQLLexer.LT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(41, SQLLexer.IS);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(4, SQLLexer.INT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(40, SQLLexer.LE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(41, SQLLexer.IS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(31, SQLLexer.OR);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(38, SQLLexer.GE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(39, SQLLexer.LT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertFalse(DFA.debug);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertFalse(sQLLexer1.equals((Object)sQLLexer2));
      assertFalse(sQLLexer2.equals((Object)sQLLexer1));
      assertFalse(sQLLexer2.equals((Object)sQLLexer0));
      assertNotSame(sQLLexer1, sQLLexer0);
      assertNotSame(sQLLexer1, sQLLexer2);
      assertNotSame(sQLLexer2, sQLLexer1);
      assertNotSame(sQLLexer2, sQLLexer0);
      assertEquals("1:1: Tokens : ( T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | T__88 | T__89 | T__90 | T__91 | T__92 | T__93 | T__94 | T__95 | T__96 | T__97 | T__98 | T__99 | T__100 | T__101 | T__102 | T__103 | T__104 | T__105 | T__106 | T__107 | T__108 | T__109 | T__110 | T__111 | T__112 | T__113 | T__114 | T__115 | T__116 | T__117 | T__118 | T__119 | T__120 | T__121 | T__122 | T__123 | T__124 | T__125 | T__126 | T__127 | T__128 | T__129 | T__130 | T__131 | T__132 | T__133 | T__134 | T__135 | T__136 | T__137 | OR | AND | XOR | EQ | BANGEQ | LTGT | GT | GE | LT | LE | IS | NOT | NULL | IN | BETWEEN | PLUS | SUB | STAR | SLASH | PERCENT | BARBAR | ROWID | NUMBER | VARCHAR2 | NVARCHAR2 | BYTE | CHAR | DATE | TIMESTAMP | BEFORE | PRIMARY | DEFAULT | IDENTIFIER | INT | COMMENT | WS | STRING | QUOTED_NAME );", string0);
      assertNotNull(string0);
      
      CharStream charStream3 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream3).LA(anyInt());
      SQLLexer sQLLexer3 = new SQLLexer(charStream3, recognizerSharedState0);
      assertTrue(sQLLexer3.failed());
      assertEquals(0, sQLLexer3.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer3.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer3.getGrammarFileName());
      assertEquals(0, sQLLexer3.getCharPositionInLine());
      assertEquals(75, sQLLexer3.getBacktrackingLevel());
      assertEquals(0, sQLLexer3.getRuleMemoizationCacheSize());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(10, recognizerSharedState0.type);
      assertEquals(21, recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertFalse(sQLLexer3.equals((Object)sQLLexer1));
      assertFalse(sQLLexer3.equals((Object)sQLLexer2));
      assertFalse(sQLLexer3.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer3);
      
      sQLLexer3.mT__133();
      assertTrue(sQLLexer3.failed());
      assertEquals(0, sQLLexer3.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer3.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer3.getGrammarFileName());
      assertEquals(0, sQLLexer3.getCharPositionInLine());
      assertEquals(75, sQLLexer3.getBacktrackingLevel());
      assertEquals(0, sQLLexer3.getRuleMemoizationCacheSize());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(133, recognizerSharedState0.type);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(21, recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertFalse(sQLLexer3.equals((Object)sQLLexer1));
      assertFalse(sQLLexer3.equals((Object)sQLLexer2));
      assertFalse(sQLLexer3.equals((Object)sQLLexer0));
      assertNotSame(sQLLexer3, sQLLexer1);
      assertNotSame(sQLLexer3, sQLLexer2);
      assertNotSame(sQLLexer3, sQLLexer0);
      
      sQLLexer1.mT__123();
      assertEquals(75, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertTrue(sQLLexer1.failed());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(123, recognizerSharedState0.type);
      assertEquals(21, recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(40, SQLLexer.LE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(60, SQLLexer.WS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(39, SQLLexer.LT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(41, SQLLexer.IS);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertFalse(sQLLexer1.equals((Object)sQLLexer3));
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertFalse(sQLLexer1.equals((Object)sQLLexer2));
      assertNotSame(sQLLexer1, sQLLexer3);
      assertNotSame(sQLLexer1, sQLLexer0);
      assertNotSame(sQLLexer1, sQLLexer2);
      
      try { 
        sQLLexer2.mT__84();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(31, SQLLexer.OR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(41, SQLLexer.IS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(43, SQLLexer.IN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__104();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte) (-10);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-15), (byte)109, (byte) (-10)}, byteArray0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1371)).when(charStream0).getCharPositionInLine();
      doReturn((-1371)).when(charStream0).getLine();
      doReturn((-1514), 101).when(charStream0).LA(anyInt());
      doReturn((-1514)).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals((-1371), sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1371), sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(38, SQLLexer.GE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(60, SQLLexer.WS);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__75();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(32, SQLLexer.AND);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(43, SQLLexer.IN);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(41, SQLLexer.IS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertNotNull(sQLLexer0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer1 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertFalse(sQLLexer1.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(38, SQLLexer.GE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(39, SQLLexer.LT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      try { 
        sQLLexer1.mT__134();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(32, SQLLexer.AND);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(43, SQLLexer.IN);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(39, SQLLexer.LT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(41, SQLLexer.IS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(38, SQLLexer.GE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(37, SQLLexer.GT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__101();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(40, SQLLexer.LE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(32, SQLLexer.AND);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__65();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(39, SQLLexer.LT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mTIMESTAMP();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__70();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__111();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(40, SQLLexer.LE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(38, SQLLexer.GE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertNotNull(sQLLexer0);
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertNotNull(recognitionException0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__75();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(31, SQLLexer.OR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mLTGT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(39, SQLLexer.LT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mNVARCHAR2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(39, SQLLexer.LT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(41, SQLLexer.IS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__72();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(41, SQLLexer.IS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(63, SQLLexer.T__63);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(4, SQLLexer.INT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(38, SQLLexer.GE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(7, SQLLexer.STRING);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__113();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(32, SQLLexer.AND);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(60, SQLLexer.WS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(40, SQLLexer.LE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(100, SQLLexer.T__100);
      assertNotNull(sQLLexer0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer1 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer1.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(4, SQLLexer.INT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(40, SQLLexer.LE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(109, SQLLexer.T__109);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      RecognizerSharedState recognizerSharedState2 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertFalse(recognizerSharedState2.failed);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState2);
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertNotNull(recognitionException0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__121();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-2538)).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals((-2538), sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(43, SQLLexer.IN);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(39, SQLLexer.LT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(41, SQLLexer.IS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(40, SQLLexer.LE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(32, SQLLexer.AND);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertNotNull(sQLLexer0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      RecognizerSharedState recognizerSharedState2 = new RecognizerSharedState(recognizerSharedState1);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertFalse(recognizerSharedState2.failed);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState2);
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.index);
      assertNotNull(recognitionException0);
      
      try { 
        sQLLexer0.mT__129();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(39, SQLLexer.LT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(37, SQLLexer.GT);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(60, SQLLexer.WS);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__109();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(41, SQLLexer.IS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(39, SQLLexer.LT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mINT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(38, SQLLexer.GE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mTokens();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.DFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(32, SQLLexer.AND);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(39, SQLLexer.LT);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__95();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(38, SQLLexer.GE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__132();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__80();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(2881, 2881).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(37, SQLLexer.GT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__78();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(110, 146).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.text = "\"8p|";
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(146, sQLLexer0.getLine());
      assertEquals(146, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(40, SQLLexer.LE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertNotNull(sQLLexer0);
      
      recognizerSharedState0.tokenStartCharIndex = 389;
      recognizerSharedState0.backtracking = 75;
      sQLLexer0.mT__119();
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(146, sQLLexer0.getLine());
      assertEquals(146, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(75, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(119, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(40, SQLLexer.LE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      
      sQLLexer0.mT__110();
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(146, sQLLexer0.getLine());
      assertEquals(146, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(75, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(110, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(40, SQLLexer.LE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(176).when(charStream0).getCharPositionInLine();
      doReturn(176).when(charStream0).getLine();
      doReturn(176, 114).when(charStream0).LA(anyInt());
      doReturn(269).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(176, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(176, sQLLexer0.getLine());
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(60, SQLLexer.WS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(39, SQLLexer.LT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(41, SQLLexer.IS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(37, SQLLexer.GT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__112();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(39, SQLLexer.LT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__106();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(47).when(charStream0).getCharPositionInLine();
      doReturn(47).when(charStream0).getLine();
      doReturn(1457, (-934), 0, 0).when(charStream0).LA(anyInt());
      doReturn((-3747)).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertEquals(47, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(47, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(60, SQLLexer.WS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mWS();
      assertEquals(47, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(47, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(60, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals(99, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(60, SQLLexer.WS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      
      try { 
        sQLLexer0.mT__117();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(60, SQLLexer.WS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertNotNull(sQLLexer0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer1 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(42, SQLLexer.NULL);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(43, SQLLexer.IN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      try { 
        sQLLexer1.mT__70();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(40, SQLLexer.LE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(4, SQLLexer.INT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(60, SQLLexer.WS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__137();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(39, SQLLexer.LT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(32, SQLLexer.AND);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(37, SQLLexer.GT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mEQ();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(41, SQLLexer.IS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(32, SQLLexer.AND);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(39, SQLLexer.LT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__70();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(60, SQLLexer.WS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(37, SQLLexer.GT);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__118();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(94, SQLLexer.T__94);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(113, SQLLexer.T__113);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mDROP_TABLE();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(94, SQLLexer.T__94);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(113, SQLLexer.T__113);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(10, SQLLexer.DEFAULT);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__89();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(40, SQLLexer.LE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(38, SQLLexer.GE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(33, SQLLexer.XOR);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__105();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(1081, 2, 1081).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.text = "8";
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(1081, sQLLexer0.getCharPositionInLine());
      assertEquals(2, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(32, SQLLexer.AND);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertNotNull(sQLLexer0);
      
      recognizerSharedState0.tokenStartCharIndex = 389;
      recognizerSharedState0.backtracking = 75;
      sQLLexer0.mT__78();
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(1081, sQLLexer0.getCharPositionInLine());
      assertEquals(2, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(78, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(32, SQLLexer.AND);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      
      sQLLexer0.mROWID();
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(1081, sQLLexer0.getCharPositionInLine());
      assertEquals(2, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(51, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(32, SQLLexer.AND);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      
      SQLLexer sQLLexer1 = new SQLLexer((CharStream) null, recognizerSharedState0);
      assertEquals(75, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertTrue(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(51, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(43, SQLLexer.IN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(37, SQLLexer.GT);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      sQLLexer0.mT__104();
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(1081, sQLLexer0.getCharPositionInLine());
      assertEquals(2, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(104, recognizerSharedState0.type);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(32, SQLLexer.AND);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertFalse(sQLLexer0.equals((Object)sQLLexer1));
      assertNotSame(sQLLexer0, sQLLexer1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream1).getCharPositionInLine();
      doReturn(0).when(charStream1).getLine();
      doReturn(0, 0).when(charStream1).LA(anyInt());
      doReturn(0).when(charStream1).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream1, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(4, SQLLexer.INT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertNotNull(sQLLexer0);
      
      recognizerSharedState0.tokenStartCharPositionInLine = (-1404);
      try { 
        sQLLexer0.mROWID();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(13).when(charStream0).getCharPositionInLine();
      doReturn(13).when(charStream0).getLine();
      doReturn(13, 1395).when(charStream0).LA(anyInt());
      doReturn(293).when(charStream0).index();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(13, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(13, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__63();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(40, SQLLexer.LE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mGT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(37, SQLLexer.GT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(60, SQLLexer.WS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(102, SQLLexer.T__102);
      assertNotNull(sQLLexer0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer1 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer1.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      try { 
        sQLLexer1.mT__124();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intStream0).LA(anyInt());
      doReturn(0).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.index);
      assertNotNull(recognitionException0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\u0001V\u0003\uFFFF\u0001U\u0005\uFFFF\u0001W");
      assertNotNull(mockPrintWriter0);
      
      recognitionException0.printStackTrace((PrintWriter) mockPrintWriter0);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.index);
      
      List<String> list0 = BaseRecognizer.getRuleInvocationStack((Throwable) recognitionException0, (String) null);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, recognitionException0.charPositionInLine);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.index);
      assertFalse(list0.contains("\u0001V\u0003\uFFFF\u0001U\u0005\uFFFF\u0001W"));
      assertNotNull(list0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(60, SQLLexer.WS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(39, SQLLexer.LT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__99();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      recognizerSharedState1.failed = false;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLLexer0);
      
      recognizerSharedState0.channel = 65;
      try { 
        sQLLexer0.mSTRING();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(37, SQLLexer.GT);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__112();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(32, SQLLexer.AND);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(38, SQLLexer.GE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(84, SQLLexer.T__84);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__108();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(1, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(1, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLLexer.IS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(124, SQLLexer.T__124);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mINVOCATION();
      assertEquals(1, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(1, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLLexer.IS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(124, SQLLexer.T__124);
      
      sQLLexer0.mALTER_TABLE();
      assertEquals(1, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(1, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLLexer.IS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(124, SQLLexer.T__124);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      sQLLexer0.mNAME_LIST();
      assertEquals(1, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(1, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLLexer.IS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(124, SQLLexer.T__124);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream1).getCharPositionInLine();
      doReturn(0).when(charStream1).getLine();
      doReturn(0, 0).when(charStream1).LA(anyInt());
      doReturn(0).when(charStream1).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer1 = new SQLLexer(charStream1, recognizerSharedState0);
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertFalse(sQLLexer1.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(4, SQLLexer.INT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(37, SQLLexer.GT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      try { 
        sQLLexer1.mT__129();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(114, SQLLexer.T__114);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(39, SQLLexer.LT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__65();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(38, SQLLexer.GE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(31, SQLLexer.OR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__64();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(75).when(charStream0).getCharPositionInLine();
      doReturn(2490).when(charStream0).getLine();
      doReturn(75, 75).when(charStream0).LA(anyInt());
      doReturn(75).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(75, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(2490, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(4, SQLLexer.INT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__135();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(60, SQLLexer.WS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(32, SQLLexer.AND);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(43, SQLLexer.IN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(38, SQLLexer.GE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertNotNull(sQLLexer0);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(85).when(charStream1).getCharPositionInLine();
      doReturn(93).when(charStream1).getLine();
      doReturn(3, 63).when(charStream1).LA(anyInt());
      doReturn(112).when(charStream1).index();
      sQLLexer0.mCREATE_TABLE();
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(60, SQLLexer.WS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(32, SQLLexer.AND);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(43, SQLLexer.IN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(38, SQLLexer.GE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer1 = new SQLLexer(charStream1, recognizerSharedState1);
      assertEquals(93, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(85, sQLLexer1.getCharPositionInLine());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(39, SQLLexer.LT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(31, SQLLexer.OR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      try { 
        sQLLexer1.mIN();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(4).when(charStream0).getCharPositionInLine();
      doReturn(4).when(charStream0).getLine();
      doReturn(12, (-1631), (-2185), (-3252)).when(charStream0).LA(anyInt());
      doReturn((-469)).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(4, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(4, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(32, SQLLexer.AND);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(136, SQLLexer.T__136);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mWS();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(4, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(4, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(99, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(60, recognizerSharedState0.type);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(32, SQLLexer.AND);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(136, SQLLexer.T__136);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      
      try { 
        sQLLexer0.mT__71();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(32, SQLLexer.AND);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(108, SQLLexer.T__108);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(38, SQLLexer.GE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__125();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(360).when(charStream0).getCharPositionInLine();
      doReturn(360).when(charStream0).getLine();
      doReturn(360, 1877).when(charStream0).LA(anyInt());
      doReturn(360).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.errorRecovery = false;
      recognizerSharedState0.channel = 253;
      recognizerSharedState0.tokenStartCharPositionInLine = (-1020);
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(360, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(360, sQLLexer0.getLine());
      assertEquals(253, recognizerSharedState0.channel);
      assertEquals((-1020), recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(31, SQLLexer.OR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(37, SQLLexer.GT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(60, SQLLexer.WS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__84();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(469).when(charStream0).getCharPositionInLine();
      doReturn(1660).when(charStream0).getLine();
      doReturn(125, 1676).when(charStream0).LA(anyInt());
      doReturn(469).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(469, sQLLexer0.getCharPositionInLine());
      assertEquals(1660, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__136();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.type = 0;
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      recognizerSharedState0.tokenStartCharPositionInLine = 0;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(60, SQLLexer.WS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLLexer0);
      
      recognizerSharedState1.failed = false;
      recognizerSharedState0.errorRecovery = true;
      recognizerSharedState0.ruleMemo = null;
      try { 
        sQLLexer0.mT__66();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(43, SQLLexer.IN);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(32, SQLLexer.AND);
      assertNotNull(sQLLexer0);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer1 = new SQLLexer(charStream1, recognizerSharedState1);
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      sQLLexer0.mDROP_TABLE();
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(43, SQLLexer.IN);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(32, SQLLexer.AND);
      assertFalse(sQLLexer0.equals((Object)sQLLexer1));
      assertNotSame(sQLLexer0, sQLLexer1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(39, SQLLexer.LT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(37, SQLLexer.GT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertNotNull(sQLLexer0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer1 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      try { 
        sQLLexer1.mDEFAULT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(2881, 2881, 2881, 2881, 2881).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.text = "\"8p|";
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(106, SQLLexer.T__106);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(60, SQLLexer.WS);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertNotNull(sQLLexer0);
      
      recognizerSharedState0.backtracking = 75;
      sQLLexer0.mQUOTED_NAME();
      sQLLexer0.mT__83();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(37, SQLLexer.GT);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__106();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(37, SQLLexer.GT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(43, SQLLexer.IN);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__121();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(42, SQLLexer.NULL);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(40, SQLLexer.LE);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__81();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(37, SQLLexer.GT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(4, SQLLexer.INT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), SQLLexer.EOF);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mQUOTED_NAME();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(60, SQLLexer.WS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(32, SQLLexer.AND);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mLE();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(60, SQLLexer.WS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__77();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(31, SQLLexer.OR);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(4, SQLLexer.INT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mCREATE_INDEX();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(31, SQLLexer.OR);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(4, SQLLexer.INT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(90).when(charStream1).getCharPositionInLine();
      doReturn(4641).when(charStream1).getLine();
      doReturn(102, 103).when(charStream1).LA(anyInt());
      doReturn((-789)).when(charStream1).index();
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer1 = new SQLLexer(charStream1, recognizerSharedState1);
      assertEquals(4641, sQLLexer1.getLine());
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(90, sQLLexer1.getCharPositionInLine());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(37, SQLLexer.GT);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      try { 
        sQLLexer1.mT__104();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-4048)).when(charStream0).getCharPositionInLine();
      doReturn(1194).when(charStream0).getLine();
      doReturn(57, 749, 0, 0, 0).when(charStream0).LA(anyInt());
      doReturn(1194).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(1194, sQLLexer0.getLine());
      assertEquals((-4048), sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(41, SQLLexer.IS);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(39, SQLLexer.LT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(32, SQLLexer.AND);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(4, SQLLexer.INT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(40, SQLLexer.LE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mINT();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(1194, sQLLexer0.getLine());
      assertEquals((-4048), sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(41, SQLLexer.IS);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(39, SQLLexer.LT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(32, SQLLexer.AND);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(4, SQLLexer.INT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(40, SQLLexer.LE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(13, SQLLexer.DROP_TABLE);
      
      try { 
        sQLLexer0.mT__77();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(100).when(charStream0).getCharPositionInLine();
      doReturn(100).when(charStream0).getLine();
      doReturn(124, 100).when(charStream0).LA(anyInt());
      doReturn(2083).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(100, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(100, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(38, SQLLexer.GE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLLexer.IS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__64();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(4, SQLLexer.INT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__123();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      recognizerSharedState1.errorRecovery = false;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLLexer0);
      
      recognizerSharedState0.tokenStartCharIndex = 14;
      recognizerSharedState1.errorRecovery = false;
      try { 
        sQLLexer0.mT__128();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(94).when(intStream0).LA(anyInt());
      doReturn(94).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(94, recognitionException0.index);
      assertEquals(94, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertNotNull(recognitionException0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\u0001V\u0003\uFFFF\u0001U\u0005\uFFFF\u0001W");
      assertNotNull(mockPrintWriter0);
      
      recognitionException0.printStackTrace((PrintWriter) mockPrintWriter0);
      assertEquals(94, recognitionException0.index);
      assertEquals(94, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.charPositionInLine);
      
      List<String> list0 = BaseRecognizer.getRuleInvocationStack((Throwable) recognitionException0, (String) null);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(94, recognitionException0.index);
      assertEquals(94, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertFalse(list0.contains("\u0001V\u0003\uFFFF\u0001U\u0005\uFFFF\u0001W"));
      assertNotNull(list0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(37, SQLLexer.GT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(40, SQLLexer.LE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(43, SQLLexer.IN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(9, SQLLexer.PRIMARY);
      assertNotNull(sQLLexer0);
      
      String string0 = sQLLexer0.getGrammarFileName();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(37, SQLLexer.GT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(40, SQLLexer.LE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(43, SQLLexer.IN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__99();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(4, SQLLexer.INT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(43, SQLLexer.IN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(38, SQLLexer.GE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(41, SQLLexer.IS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mTIMESTAMP();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(39, SQLLexer.LT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(60, SQLLexer.WS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(40, SQLLexer.LE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertNotNull(sQLLexer0);
      
      String string0 = sQLLexer0.getGrammarFileName();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(39, SQLLexer.LT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(60, SQLLexer.WS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(40, SQLLexer.LE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mPRIMARY();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).LT(anyInt());
      doReturn(0, 0).when(charStream0).getCharPositionInLine();
      doReturn(0, 0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.traceIn("F%?a", (-153));
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer1 = new SQLLexer(charStream1);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertFalse(sQLLexer1.failed());
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(43, SQLLexer.IN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      try { 
        sQLLexer0.mT__97();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(38, SQLLexer.GE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mBARBAR();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(39, SQLLexer.LT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__129();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(38, SQLLexer.GE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(4, SQLLexer.INT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__80();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(38, SQLLexer.GE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(43, SQLLexer.IN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__124();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(39, SQLLexer.LT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(60, SQLLexer.WS);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(41, SQLLexer.IS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(38, SQLLexer.GE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(17, SQLLexer.SIZE);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mSLASH();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__136();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn((String) null).when(charStream0).getSourceName();
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(38, SQLLexer.GE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertNotNull(sQLLexer0);
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertNotNull(recognitionException0);
      
      String string0 = sQLLexer0.getErrorHeader(recognitionException0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(38, SQLLexer.GE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals("line 0:0", string0);
      assertNotNull(string0);
      
      try { 
        sQLLexer0.mT__113();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__125();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(75).when(charStream0).getCharPositionInLine();
      doReturn(2491).when(charStream0).getLine();
      doReturn(75, 75).when(charStream0).LA(anyInt());
      doReturn(75).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(75, sQLLexer0.getCharPositionInLine());
      assertEquals(2491, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(39, SQLLexer.LT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(41, SQLLexer.IS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(31, SQLLexer.OR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(43, SQLLexer.IN);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mINVOCATION();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(75, sQLLexer0.getCharPositionInLine());
      assertEquals(2491, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(39, SQLLexer.LT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(41, SQLLexer.IS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(31, SQLLexer.OR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(43, SQLLexer.IN);
      
      sQLLexer0.mALTER_TABLE();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(75, sQLLexer0.getCharPositionInLine());
      assertEquals(2491, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(39, SQLLexer.LT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(41, SQLLexer.IS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(31, SQLLexer.OR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(43, SQLLexer.IN);
      
      sQLLexer0.mNAME_LIST();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(75, sQLLexer0.getCharPositionInLine());
      assertEquals(2491, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(39, SQLLexer.LT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(41, SQLLexer.IS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(31, SQLLexer.OR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(43, SQLLexer.IN);
      
      try { 
        sQLLexer0.mLT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(43, SQLLexer.IN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__122();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(38, SQLLexer.GE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(4, SQLLexer.INT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(32, SQLLexer.AND);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(60, SQLLexer.WS);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mCOMMENT_COLUMN();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(38, SQLLexer.GE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(4, SQLLexer.INT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(32, SQLLexer.AND);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(60, SQLLexer.WS);
      
      try { 
        sQLLexer0.mT__92();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(4, SQLLexer.INT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(39, SQLLexer.LT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(41, SQLLexer.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(31, SQLLexer.OR);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.skip();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(4, SQLLexer.INT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(39, SQLLexer.LT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(41, SQLLexer.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(31, SQLLexer.OR);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__82();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(60, SQLLexer.WS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(4, SQLLexer.INT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(40, SQLLexer.LE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(39, SQLLexer.LT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__120();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(43, SQLLexer.IN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(32, SQLLexer.AND);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__98();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(89).when(charStream0).getCharPositionInLine();
      doReturn(6).when(charStream0).getLine();
      doReturn(6, 13).when(charStream0).LA(anyInt());
      doReturn(6).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(89, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(6, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(41, SQLLexer.IS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(68, SQLLexer.T__68);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(39, SQLLexer.LT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(4, SQLLexer.INT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__105();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(41, SQLLexer.IS);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(31, SQLLexer.OR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertNotNull(sQLLexer0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(4, SQLLexer.INT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertNotNull(sQLLexer0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer1 = new SQLLexer(charStream0);
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(4, SQLLexer.INT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(109, SQLLexer.T__109);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      try { 
        sQLLexer1.mT__119();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(42, SQLLexer.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(31, SQLLexer.OR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__120();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(38, SQLLexer.GE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(37, SQLLexer.GT);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(40, SQLLexer.LE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(41, SQLLexer.IS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(43, SQLLexer.IN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(39, SQLLexer.LT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(60, SQLLexer.WS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mBANGEQ();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(1395).when(charStream0).getCharPositionInLine();
      doReturn(1395).when(charStream0).getLine();
      doReturn(57, 57).when(charStream0).LA(anyInt());
      doReturn(1395).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(1395, sQLLexer0.getCharPositionInLine());
      assertEquals(1395, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(43, SQLLexer.IN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(32, SQLLexer.AND);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(40, SQLLexer.LE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(39, SQLLexer.LT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(41, SQLLexer.IS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__131();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(75, SQLLexer.T__75);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertNotNull(sQLLexer0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer1 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(43, SQLLexer.IN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(165, 1665).when(charStream1).getCharPositionInLine();
      doReturn(82, (-166)).when(charStream1).getLine();
      doReturn(93, 53, 97, 22).when(charStream1).LA(anyInt());
      doReturn("nextToken", "nextToken").when(charStream1).getSourceName();
      doReturn(80, 57).when(charStream1).index();
      doReturn(103).when(charStream1).mark();
      SQLLexer sQLLexer2 = new SQLLexer(charStream1, recognizerSharedState0);
      assertEquals(0, sQLLexer2.getNumberOfSyntaxErrors());
      assertEquals(165, sQLLexer2.getCharPositionInLine());
      assertEquals(0, sQLLexer2.getBacktrackingLevel());
      assertEquals(82, sQLLexer2.getLine());
      assertFalse(sQLLexer2.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer2.getGrammarFileName());
      assertEquals(0, sQLLexer2.getRuleMemoizationCacheSize());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(40, SQLLexer.LE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertFalse(sQLLexer2.equals((Object)sQLLexer0));
      assertFalse(sQLLexer2.equals((Object)sQLLexer1));
      assertNotNull(sQLLexer2);
      
      // Undeclared exception!
      try { 
        sQLLexer2.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SQLLexer error
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0, 0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(40, SQLLexer.LE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mWS();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(136, SQLLexer.T__136);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(32, SQLLexer.AND);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(4, SQLLexer.INT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertNotNull(sQLLexer0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer1 = new SQLLexer((CharStream) null, recognizerSharedState0);
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(60, SQLLexer.WS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(37, SQLLexer.GT);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(109, SQLLexer.T__109);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      // Undeclared exception!
      try { 
        sQLLexer1.mT__81();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(40, SQLLexer.LE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(32, SQLLexer.AND);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mIN();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(2148).when(charStream0).getCharPositionInLine();
      doReturn(4563).when(charStream0).getLine();
      doReturn(95, 2148, (-1328), 4563, 0).when(charStream0).LA(anyInt());
      doReturn((-2104)).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(4563, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(2148, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(37, SQLLexer.GT);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mIDENTIFIER();
      assertEquals(4563, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(2148, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(37, SQLLexer.GT);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      
      try { 
        sQLLexer0.mT__72();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__101();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(1081).when(charStream0).getCharPositionInLine();
      doReturn(2).when(charStream0).getLine();
      doReturn(1081, 2, 1081, (-3052), (-3052)).when(charStream0).LA(anyInt());
      doReturn(75).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.text = "\"8p|";
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(1081, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(2, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(41, SQLLexer.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(31, SQLLexer.OR);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(4, SQLLexer.INT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(37, SQLLexer.GT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertNotNull(sQLLexer0);
      
      recognizerSharedState0.tokenStartCharIndex = 389;
      recognizerSharedState0.backtracking = 75;
      sQLLexer0.mT__78();
      assertEquals(1081, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertTrue(sQLLexer0.failed());
      assertEquals(2, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(78, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(41, SQLLexer.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(31, SQLLexer.OR);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(4, SQLLexer.INT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(37, SQLLexer.GT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      
      try { 
        sQLLexer0.mQUOTED_NAME();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__116();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(1081).when(charStream0).getCharPositionInLine();
      doReturn(2).when(charStream0).getLine();
      doReturn(1081, 2, 1081, (-3052), (-3052)).when(charStream0).LA(anyInt());
      doReturn(75, 0).when(charStream0).index();
      doReturn(0).when(charStream0).mark();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.text = "\"8p|";
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(2, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(1081, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(39, SQLLexer.LT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(60, SQLLexer.WS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertNotNull(sQLLexer0);
      
      recognizerSharedState0.tokenStartCharIndex = 389;
      recognizerSharedState0.backtracking = 75;
      sQLLexer0.mT__125();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals(2, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(1081, sQLLexer0.getCharPositionInLine());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(125, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(39, SQLLexer.LT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(60, SQLLexer.WS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      
      sQLLexer0.mT__78();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals(2, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(1081, sQLLexer0.getCharPositionInLine());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(78, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(39, SQLLexer.LT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(60, SQLLexer.WS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      
      sQLLexer0.mQUOTED_NAME();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals(2, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(1081, sQLLexer0.getCharPositionInLine());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(8, recognizerSharedState0.type);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(39, SQLLexer.LT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(60, SQLLexer.WS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      
      recognizerSharedState0.syntaxErrors = 21;
      sQLLexer0.mT__78();
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals(2, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(1081, sQLLexer0.getCharPositionInLine());
      assertEquals(21, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals(21, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(78, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(39, SQLLexer.LT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(60, SQLLexer.WS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      
      sQLLexer0.mT__67();
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals(2, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(1081, sQLLexer0.getCharPositionInLine());
      assertEquals(21, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(67, recognizerSharedState0.type);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals(21, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(39, SQLLexer.LT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(60, SQLLexer.WS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      
      CommonToken commonToken0 = (CommonToken)sQLLexer0.nextToken();
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals(2, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(1081, sQLLexer0.getCharPositionInLine());
      assertEquals(21, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(67, commonToken0.getType());
      assertEquals(2, commonToken0.getLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getStopIndex());
      assertEquals(75, commonToken0.getStartIndex());
      assertEquals(1081, commonToken0.getCharPositionInLine());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(67, recognizerSharedState0.type);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals(21, recognizerSharedState0.syntaxErrors);
      assertEquals(1081, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(75, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(2, recognizerSharedState0.tokenStartLine);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(39, SQLLexer.LT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(60, SQLLexer.WS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertNotNull(commonToken0);
      
      sQLLexer0.mT__110();
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals(2, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(1081, sQLLexer0.getCharPositionInLine());
      assertEquals(21, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals(21, recognizerSharedState0.syntaxErrors);
      assertEquals(1081, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(110, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(75, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(2, recognizerSharedState0.tokenStartLine);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(39, SQLLexer.LT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(60, SQLLexer.WS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      
      sQLLexer0.mT__113();
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals(2, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(1081, sQLLexer0.getCharPositionInLine());
      assertEquals(21, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(113, recognizerSharedState0.type);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals(21, recognizerSharedState0.syntaxErrors);
      assertEquals(1081, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(75, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(2, recognizerSharedState0.tokenStartLine);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(39, SQLLexer.LT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(60, SQLLexer.WS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-83);
      byteArray0[7] = (byte) (-44);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)95, (byte)56, (byte)87, (byte)64, (byte) (-116), (byte)6, (byte) (-83), (byte) (-44)}, byteArray0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(57).when(charStream0).getCharPositionInLine();
      doReturn(57).when(charStream0).getLine();
      doReturn(57, (-926), 1490, 70).when(charStream0).LA(anyInt());
      doReturn((-1004)).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(57, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(57, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mWS();
      assertEquals(57, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(57, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(99, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(60, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      
      try { 
        sQLLexer0.mT__110();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      recognizerSharedState0.channel = (-1971);
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1971), recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(4, SQLLexer.INT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(38, SQLLexer.GE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mGT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(40, SQLLexer.LE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(32, SQLLexer.AND);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(39, SQLLexer.LT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(114, SQLLexer.T__114);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mCOLUMN_SPEC();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(40, SQLLexer.LE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(32, SQLLexer.AND);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(39, SQLLexer.LT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(114, SQLLexer.T__114);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(94).when(charStream0).getCharPositionInLine();
      doReturn(628).when(charStream0).getLine();
      doReturn(628, (-659)).when(charStream0).LA(anyInt());
      doReturn(105).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer0 = new SQLLexer(charStream1, recognizerSharedState1);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(37, SQLLexer.GT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(32, SQLLexer.AND);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mINDEX_NAME();
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(37, SQLLexer.GT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(32, SQLLexer.AND);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      
      recognizerSharedState1.failed = false;
      SQLLexer sQLLexer1 = new SQLLexer(charStream0, recognizerSharedState1);
      assertEquals(94, sQLLexer1.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(628, sQLLexer1.getLine());
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(38, SQLLexer.GE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(37, SQLLexer.GT);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      recognizerSharedState0.channel = 65;
      try { 
        sQLLexer1.mSTRING();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(60, SQLLexer.WS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__63();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-320), 13, (-544), (-320), 108).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.text = "\"8p|";
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(41, SQLLexer.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertNotNull(sQLLexer0);
      
      recognizerSharedState0.tokenStartCharIndex = 389;
      recognizerSharedState0.backtracking = 75;
      recognizerSharedState0.tokenStartCharIndex = 33;
      sQLLexer0.mGE();
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(38, recognizerSharedState0.type);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(33, recognizerSharedState0.tokenStartCharIndex);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(41, SQLLexer.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      
      sQLLexer0.mTIMESTAMP();
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(58, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(33, recognizerSharedState0.tokenStartCharIndex);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(41, SQLLexer.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      
      sQLLexer0.mT__61();
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(61, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(33, recognizerSharedState0.tokenStartCharIndex);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(41, SQLLexer.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      
      sQLLexer0.mT__136();
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(136, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(33, recognizerSharedState0.tokenStartCharIndex);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(41, SQLLexer.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      
      sQLLexer0.mT__107();
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(107, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(33, recognizerSharedState0.tokenStartCharIndex);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(41, SQLLexer.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      
      sQLLexer0.mT__75();
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(75, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(33, recognizerSharedState0.tokenStartCharIndex);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(41, SQLLexer.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      
      sQLLexer0.mGE();
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(38, recognizerSharedState0.type);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(33, recognizerSharedState0.tokenStartCharIndex);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(41, SQLLexer.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.text = "\"8p|";
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(38, SQLLexer.GE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(39, SQLLexer.LT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertNotNull(sQLLexer0);
      
      recognizerSharedState0.tokenStartCharIndex = 389;
      recognizerSharedState0.backtracking = 75;
      sQLLexer0.mT__78();
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(recognizerSharedState0.errorRecovery);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(78, recognizerSharedState0.type);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(38, SQLLexer.GE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(39, SQLLexer.LT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      
      // Undeclared exception!
      sQLLexer0.mQUOTED_NAME();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(32, SQLLexer.AND);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(31, SQLLexer.OR);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(39, SQLLexer.LT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(38, SQLLexer.GE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(40, SQLLexer.LE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mDATE();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(39, SQLLexer.LT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(41, SQLLexer.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertNotNull(sQLLexer0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sQLLexer0.mT__90();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(530).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(38, SQLLexer.GE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(41, SQLLexer.IS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(4, SQLLexer.INT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(40, SQLLexer.LE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(37, SQLLexer.GT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.memoize(charStream0, 0, 1455);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.BaseRecognizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(31, SQLLexer.OR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(37, SQLLexer.GT);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(60, SQLLexer.WS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertNotNull(sQLLexer0);
      
      SQLLexer sQLLexer1 = new SQLLexer((CharStream) null);
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(39, SQLLexer.LT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mBEFORE();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.index);
      assertNotNull(recognitionException0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(40, SQLLexer.LE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(115, SQLLexer.T__115);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mPERCENT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(39, SQLLexer.LT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__112();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(112, SQLLexer.T__112);
      assertEquals(68, SQLLexer.T__68);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__106();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(4, SQLLexer.INT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(60, SQLLexer.WS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(37, SQLLexer.GT);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(41, SQLLexer.IS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__96();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(108, SQLLexer.T__108);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(32, SQLLexer.AND);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(4, SQLLexer.INT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__73();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(60, SQLLexer.WS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mBYTE();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1251), 115, 493, 493, 115).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.text = "\"8p|";
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(40, SQLLexer.LE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(39, SQLLexer.LT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertNotNull(sQLLexer0);
      
      recognizerSharedState0.tokenStartCharIndex = 389;
      recognizerSharedState0.backtracking = 75;
      sQLLexer0.mT__78();
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertTrue(recognizerSharedState0.failed);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(78, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(40, SQLLexer.LE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(39, SQLLexer.LT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      
      sQLLexer0.mQUOTED_NAME();
      recognizerSharedState0.lastErrorIndex = sQLLexer0.CREATE_INDEX;
      sQLLexer0.mT__67();
      sQLLexer0.mDEFAULT();
      sQLLexer0.mT__83();
      sQLLexer0.mT__108();
      sQLLexer0.mT__104();
      sQLLexer0.mGE();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(43, SQLLexer.IN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(60, SQLLexer.WS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(109, SQLLexer.T__109);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__134();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-2347), (-2347), 716, 81, 95).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.text = "\"8p|";
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(40, SQLLexer.LE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(38, SQLLexer.GE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(39, SQLLexer.LT);
      assertNotNull(sQLLexer0);
      
      recognizerSharedState0.tokenStartCharIndex = 389;
      recognizerSharedState0.backtracking = 75;
      sQLLexer0.mQUOTED_NAME();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(8, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(40, SQLLexer.LE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(38, SQLLexer.GE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(39, SQLLexer.LT);
      
      recognizerSharedState0.lastErrorIndex = 21;
      sQLLexer0.mT__112();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(21, recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(112, recognizerSharedState0.type);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(40, SQLLexer.LE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(38, SQLLexer.GE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(39, SQLLexer.LT);
      
      sQLLexer0.mT__118();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(118, recognizerSharedState0.type);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(21, recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(40, SQLLexer.LE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(38, SQLLexer.GE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(39, SQLLexer.LT);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(4, SQLLexer.INT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__82();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(38, SQLLexer.GE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(31, SQLLexer.OR);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(39, SQLLexer.LT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mPERCENT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(32, SQLLexer.AND);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(40, SQLLexer.LE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(37, SQLLexer.GT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(41, SQLLexer.IS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(115, SQLLexer.T__115);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__124();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-2347), (-2347), 716).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.text = "\"8p|";
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(32, SQLLexer.AND);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertNotNull(sQLLexer0);
      
      recognizerSharedState0.tokenStartCharIndex = 389;
      recognizerSharedState0.backtracking = 75;
      sQLLexer0.mT__78();
      assertEquals(0, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(78, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(32, SQLLexer.AND);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      
      sQLLexer0.mT__84();
      assertEquals(0, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(84, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(32, SQLLexer.AND);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      
      sQLLexer0.mT__133();
      assertEquals(0, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(133, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(32, SQLLexer.AND);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(4, SQLLexer.INT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(38, SQLLexer.GE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(43, SQLLexer.IN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__107();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0, 0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(41, SQLLexer.IS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(32, SQLLexer.AND);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(38, SQLLexer.GE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mIDENTIFIER();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(charStream0).getCharPositionInLine();
      doReturn(0, 0).when(charStream0).getLine();
      doReturn(0, 0, 0).when(charStream0).LA(anyInt());
      doReturn((String) null).when(charStream0).getSourceName();
      doReturn(0, 0).when(charStream0).index();
      doReturn(0).when(charStream0).mark();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.failed = false;
      recognizerSharedState0.tokenStartCharIndex = 3143;
      recognizerSharedState0.text = "Vd:x-ZTekzZ7>h]k^";
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(3143, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(37, SQLLexer.GT);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(4, SQLLexer.INT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(60, SQLLexer.WS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SQLLexer error
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(32, SQLLexer.AND);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(41, SQLLexer.IS);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__107();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(3059).when(charStream0).getCharPositionInLine();
      doReturn(3059).when(charStream0).getLine();
      doReturn(3059, (-976)).when(charStream0).LA(anyInt());
      doReturn(3059).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(3059, sQLLexer0.getCharPositionInLine());
      assertEquals(3059, sQLLexer0.getLine());
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(31, SQLLexer.OR);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(41, SQLLexer.IS);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(32, SQLLexer.AND);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(4, SQLLexer.INT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__128();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(40, SQLLexer.LE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mSTAR();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(32, SQLLexer.AND);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__89();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(39, SQLLexer.LT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(31, SQLLexer.OR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(40, SQLLexer.LE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(4, SQLLexer.INT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__88();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-570)).when(charStream0).getCharPositionInLine();
      doReturn((-570)).when(charStream0).getLine();
      doReturn((-570), (-570)).when(charStream0).LA(anyInt());
      doReturn((-570)).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals((-570), sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals((-570), sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(87, SQLLexer.T__87);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(38, SQLLexer.GE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(43, SQLLexer.IN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(4, SQLLexer.INT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(32, SQLLexer.AND);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(60, SQLLexer.WS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(118, SQLLexer.T__118);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mGE();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(32, SQLLexer.AND);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(38, SQLLexer.GE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(84, SQLLexer.T__84);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mLE();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(38, SQLLexer.GE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(108, SQLLexer.T__108);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(32, SQLLexer.AND);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__68();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-262)).when(charStream0).getCharPositionInLine();
      doReturn((-262)).when(charStream0).getLine();
      doReturn(524, (-554)).when(charStream0).LA(anyInt());
      doReturn(110).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.failed = false;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals((-262), sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-262), sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(4, SQLLexer.INT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(106, SQLLexer.T__106);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(39, SQLLexer.LT);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mNULL();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(522, 200).when(charStream0).getCharPositionInLine();
      doReturn(64, 64).when(charStream0).getLine();
      doReturn(35, 522, 284, 284, 284).when(charStream0).LA(anyInt());
      doReturn(64, 1, 1, 36, 522).when(charStream0).index();
      doReturn((-1274), (-31)).when(charStream0).mark();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      
      recognizerSharedState0.backtracking = 100;
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(64, sQLLexer0.getLine());
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertEquals(522, sQLLexer0.getCharPositionInLine());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(60, SQLLexer.WS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(39, SQLLexer.LT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      
      sQLLexer0.mT__64();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(200, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(64, sQLLexer0.getLine());
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(64, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(60, SQLLexer.WS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(39, SQLLexer.LT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      
      CommonToken commonToken0 = (CommonToken)sQLLexer0.nextToken();
      assertEquals(35, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(35, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(64, commonToken0.getType());
      assertEquals(64, commonToken0.getStartIndex());
      assertEquals(35, commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(35, commonToken0.getLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertEquals(35, recognizerSharedState1.tokenStartLine);
      assertEquals(35, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(64, recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(64, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(60, SQLLexer.WS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(39, SQLLexer.LT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      
      recognizerSharedState1.channel = 74;
      sQLLexer0.mAND();
      assertEquals(35, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(35, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertEquals(35, recognizerSharedState1.tokenStartLine);
      assertEquals(35, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(64, recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(32, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(60, SQLLexer.WS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(39, SQLLexer.LT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      
      recognizerSharedState1.lastErrorIndex = 99;
      recognizerSharedState1.tokenStartCharPositionInLine = 77;
      CommonToken commonToken1 = (CommonToken)sQLLexer0.emit();
      assertEquals(35, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(35, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals((-1), commonToken1.getTokenIndex());
      assertEquals(77, commonToken1.getCharPositionInLine());
      assertEquals(64, commonToken1.getStartIndex());
      assertEquals(0, commonToken1.getChannel());
      assertEquals(32, commonToken1.getType());
      assertEquals(35, commonToken1.getLine());
      assertEquals(0, commonToken1.getStopIndex());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(99, recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertEquals(35, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(77, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(64, recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(32, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(60, SQLLexer.WS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(39, SQLLexer.LT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      
      CommonToken commonToken2 = (CommonToken)sQLLexer0.nextToken();
      assertEquals(35, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(35, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals((-1), commonToken2.getTokenIndex());
      assertEquals(521, commonToken2.getStopIndex());
      assertEquals(35, commonToken2.getLine());
      assertEquals(35, commonToken2.getCharPositionInLine());
      assertEquals(36, commonToken2.getStartIndex());
      assertEquals(0, commonToken2.getChannel());
      assertEquals(32, commonToken2.getType());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(99, recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertEquals(35, recognizerSharedState1.tokenStartLine);
      assertEquals(35, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(36, recognizerSharedState1.tokenStartCharIndex);
      assertEquals(32, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(60, SQLLexer.WS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(39, SQLLexer.LT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      
      sQLLexer0.mBANGEQ();
      assertEquals(35, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(35, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(99, recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertEquals(35, recognizerSharedState1.tokenStartLine);
      assertEquals(35, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(35, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(36, recognizerSharedState1.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState1.channel);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(60, SQLLexer.WS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(39, SQLLexer.LT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      
      sQLLexer0.mLT();
      assertEquals(35, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(35, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(99, recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertEquals(39, recognizerSharedState1.type);
      assertEquals(35, recognizerSharedState1.tokenStartLine);
      assertEquals(35, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(36, recognizerSharedState1.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState1.channel);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(60, SQLLexer.WS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(39, SQLLexer.LT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      
      sQLLexer0.mEQ();
      assertEquals(35, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(35, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(99, recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertEquals(35, recognizerSharedState1.tokenStartLine);
      assertEquals(35, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(36, recognizerSharedState1.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(34, recognizerSharedState1.type);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(60, SQLLexer.WS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(39, SQLLexer.LT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      
      sQLLexer0.mVALUE_LIST();
      assertEquals(35, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(35, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(99, recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertEquals(35, recognizerSharedState1.tokenStartLine);
      assertEquals(35, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(36, recognizerSharedState1.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(34, recognizerSharedState1.type);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(60, SQLLexer.WS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(39, SQLLexer.LT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      
      sQLLexer0.mSIZE();
      assertEquals(35, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(35, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(99, recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertEquals(35, recognizerSharedState1.tokenStartLine);
      assertEquals(35, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(36, recognizerSharedState1.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(34, recognizerSharedState1.type);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(60, SQLLexer.WS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(39, SQLLexer.LT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      
      sQLLexer0.mSUB();
      assertEquals(35, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(35, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(99, recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertEquals(46, recognizerSharedState1.type);
      assertEquals(35, recognizerSharedState1.tokenStartLine);
      assertEquals(35, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(36, recognizerSharedState1.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState1.channel);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(60, SQLLexer.WS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(39, SQLLexer.LT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      
      RecognizerSharedState recognizerSharedState2 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertFalse(recognizerSharedState2.failed);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      
      SQLLexer sQLLexer1 = new SQLLexer();
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(31, SQLLexer.OR);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(39, SQLLexer.LT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      
      sQLLexer1.setBacktrackingLevel(28);
      assertFalse(sQLLexer1.failed());
      assertEquals(28, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(31, SQLLexer.OR);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(39, SQLLexer.LT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      
      RecognizerSharedState recognizerSharedState3 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState3.failed);
      assertEquals((-1), recognizerSharedState3.lastErrorIndex);
      assertEquals(0, recognizerSharedState3.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState3.channel);
      assertEquals(100, recognizerSharedState3.backtracking);
      assertEquals(0, recognizerSharedState3.type);
      assertEquals((-1), recognizerSharedState3.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState3.tokenStartLine);
      assertEquals((-1), recognizerSharedState3._fsp);
      assertEquals(0, recognizerSharedState3.syntaxErrors);
      assertFalse(recognizerSharedState3.errorRecovery);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer2 = new SQLLexer(charStream1, recognizerSharedState3);
      assertEquals(0, sQLLexer2.getCharPositionInLine());
      assertEquals(0, sQLLexer2.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer2.failed());
      assertEquals(100, sQLLexer2.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer2.getGrammarFileName());
      assertEquals(0, sQLLexer2.getLine());
      assertEquals(0, sQLLexer2.getRuleMemoizationCacheSize());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState3.failed);
      assertEquals((-1), recognizerSharedState3.lastErrorIndex);
      assertEquals(0, recognizerSharedState3.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState3.channel);
      assertEquals(100, recognizerSharedState3.backtracking);
      assertEquals(0, recognizerSharedState3.type);
      assertEquals((-1), recognizerSharedState3.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState3.tokenStartLine);
      assertEquals((-1), recognizerSharedState3._fsp);
      assertEquals(0, recognizerSharedState3.syntaxErrors);
      assertFalse(recognizerSharedState3.errorRecovery);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(46, SQLLexer.SUB);
      
      sQLLexer0.mT__78();
      assertEquals(35, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(35, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      
      // Undeclared exception!
      try { 
        sQLLexer1.mT__67();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(4, SQLLexer.INT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(32, SQLLexer.AND);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mPLUS();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(136, SQLLexer.T__136);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(40, SQLLexer.LE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mBARBAR();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(118).when(charStream0).getCharPositionInLine();
      doReturn(118).when(charStream0).getLine();
      doReturn(220, 82).when(charStream0).LA(anyInt());
      doReturn((-2247)).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(118, sQLLexer0.getLine());
      assertEquals(118, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(38, SQLLexer.GE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mCOMMENT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(79, 79, 2081).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.text = "\"8p|";
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(41, SQLLexer.IS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertNotNull(sQLLexer0);
      
      recognizerSharedState0.tokenStartCharIndex = 389;
      try { 
        sQLLexer0.mT__86();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(40, SQLLexer.LE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(41, SQLLexer.IS);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__89();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals((-1), sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals((-1), sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(43, SQLLexer.IN);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(60, SQLLexer.WS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(37, SQLLexer.GT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mORA_CONFIGS();
      assertEquals((-1), sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals((-1), sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(43, SQLLexer.IN);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(60, SQLLexer.WS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(37, SQLLexer.GT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mCOMMENT_COLUMN();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__92();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(2881, 2881, 2881, (-320), 125).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.text = "\"8p|";
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(37, SQLLexer.GT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(41, SQLLexer.IS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(32, SQLLexer.AND);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(60, SQLLexer.WS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(39, SQLLexer.LT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(31, SQLLexer.OR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertNotNull(sQLLexer0);
      
      recognizerSharedState0.tokenStartCharIndex = 389;
      recognizerSharedState0.backtracking = 75;
      sQLLexer0.mT__78();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      assertEquals(78, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(37, SQLLexer.GT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(41, SQLLexer.IS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(32, SQLLexer.AND);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(60, SQLLexer.WS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(39, SQLLexer.LT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(31, SQLLexer.OR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      
      sQLLexer0.mQUOTED_NAME();
      recognizerSharedState0.lastErrorIndex = sQLLexer0.CREATE_INDEX;
      sQLLexer0.mT__67();
      sQLLexer0.mDEFAULT();
      sQLLexer0.mT__83();
      sQLLexer0.mT__103();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(60, SQLLexer.WS);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(4, SQLLexer.INT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mBYTE();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(37, SQLLexer.GT);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mCHAR();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(39, SQLLexer.LT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(4, SQLLexer.INT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__100();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(64, SQLLexer.T__64);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__116();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertNotNull(sQLLexer0);
      
      SQLLexer sQLLexer1 = new SQLLexer();
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(39, SQLLexer.LT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      // Undeclared exception!
      try { 
        sQLLexer1.mDEFAULT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(3379).when(charStream0).getCharPositionInLine();
      doReturn(6).when(charStream0).getLine();
      doReturn(6, 3379).when(charStream0).LA(anyInt());
      doReturn(1895).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(3379, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(6, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(37, SQLLexer.GT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(113, SQLLexer.T__113);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__132();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(133, SQLLexer.T__133);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(43, SQLLexer.IN);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mROWID();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(3364).when(charStream0).getCharPositionInLine();
      doReturn(3364).when(charStream0).getLine();
      doReturn(3364, 3364).when(charStream0).LA(anyInt());
      doReturn(3364).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(3364, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(3364, sQLLexer0.getLine());
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(37, SQLLexer.GT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(40, SQLLexer.LE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__115();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(41, SQLLexer.IS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(38, SQLLexer.GE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(40, SQLLexer.LE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(31, SQLLexer.OR);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__127();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(43, SQLLexer.IN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(84, SQLLexer.T__84);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mSTAR();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(41, SQLLexer.IS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(38, SQLLexer.GE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__83();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(37, SQLLexer.GT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mROWID();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(38, SQLLexer.GE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(37, SQLLexer.GT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__91();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(7, SQLLexer.STRING);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(40, SQLLexer.LE);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__103();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertNotNull(sQLLexer0);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(85).when(charStream1).getCharPositionInLine();
      doReturn(93).when(charStream1).getLine();
      doReturn(3, 63).when(charStream1).LA(anyInt());
      doReturn(112).when(charStream1).index();
      sQLLexer0.mCREATE_TABLE();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      
      sQLLexer0.mINVOCATION();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      
      SQLLexer sQLLexer1 = new SQLLexer(charStream1);
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(85, sQLLexer1.getCharPositionInLine());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertFalse(sQLLexer1.failed());
      assertEquals(93, sQLLexer1.getLine());
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(43, SQLLexer.IN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      try { 
        sQLLexer1.mT__91();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      doReturn(0).when(charStream0).mark();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mTokens();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.DFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(37, SQLLexer.GT);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__113();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(32, SQLLexer.AND);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertNotNull(sQLLexer0);
      
      recognizerSharedState0.backtracking = 218;
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(84).when(charStream0).getCharPositionInLine();
      doReturn(105).when(charStream0).getLine();
      doReturn(2792, 115, 96, 62, 47).when(charStream0).LA(anyInt());
      doReturn(95, (-2898)).when(charStream0).index();
      doReturn((-1)).when(charStream0).mark();
      SQLLexer sQLLexer1 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(218, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer1.failed());
      assertEquals(105, sQLLexer1.getLine());
      assertEquals(84, sQLLexer1.getCharPositionInLine());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(218, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(43, SQLLexer.IN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(60, SQLLexer.WS);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      CommonToken commonToken0 = (CommonToken)sQLLexer1.nextToken();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(218, sQLLexer1.getBacktrackingLevel());
      assertEquals(38, sQLLexer1.getLine());
      assertEquals(82, sQLLexer1.getCharPositionInLine());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer1.failed());
      assertEquals(82, commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-2899), commonToken0.getStopIndex());
      assertEquals(38, commonToken0.getLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(6, commonToken0.getType());
      assertEquals(95, commonToken0.getStartIndex());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(82, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(6, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(218, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(38, recognizerSharedState0.tokenStartLine);
      assertEquals(95, recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(43, SQLLexer.IN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(60, SQLLexer.WS);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotSame(sQLLexer1, sQLLexer0);
      assertNotNull(commonToken0);
      
      sQLLexer1.mT__86();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(218, sQLLexer1.getBacktrackingLevel());
      assertEquals(38, sQLLexer1.getLine());
      assertEquals(82, sQLLexer1.getCharPositionInLine());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertTrue(sQLLexer1.failed());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(82, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(86, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(218, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(38, recognizerSharedState0.tokenStartLine);
      assertEquals(95, recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(43, SQLLexer.IN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(60, SQLLexer.WS);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotSame(sQLLexer1, sQLLexer0);
      
      sQLLexer1.mT__133();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(218, sQLLexer1.getBacktrackingLevel());
      assertEquals(38, sQLLexer1.getLine());
      assertEquals(82, sQLLexer1.getCharPositionInLine());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertTrue(sQLLexer1.failed());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(82, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(133, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(218, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(38, recognizerSharedState0.tokenStartLine);
      assertEquals(95, recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(43, SQLLexer.IN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(60, SQLLexer.WS);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotSame(sQLLexer1, sQLLexer0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(32, SQLLexer.AND);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(66, SQLLexer.T__66);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__81();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(74, SQLLexer.T__74);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(43, SQLLexer.IN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mDATE();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(110, 2, 110, (-3052), (-3052)).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.text = "\"8p|";
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(32, SQLLexer.AND);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(31, SQLLexer.OR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertNotNull(sQLLexer0);
      
      recognizerSharedState0.tokenStartCharIndex = 389;
      recognizerSharedState0.backtracking = 75;
      sQLLexer0.mT__78();
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(78, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(32, SQLLexer.AND);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(31, SQLLexer.OR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      
      try { 
        sQLLexer0.mQUOTED_NAME();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(60, SQLLexer.WS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(39, SQLLexer.LT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__69();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(2220).when(charStream0).getCharPositionInLine();
      doReturn(97).when(charStream0).getLine();
      doReturn(320, 97).when(charStream0).LA(anyInt());
      doReturn(28).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(97, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(2220, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(60, SQLLexer.WS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(96, SQLLexer.T__96);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertNotNull(sQLLexer0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      RecognizerSharedState recognizerSharedState2 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState2.failed);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState2);
      
      try { 
        sQLLexer0.mT__109();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(40, SQLLexer.LE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mLTGT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__110();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(100).when(intStream0).LA(anyInt());
      doReturn(101).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(101, recognitionException0.index);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(100, recognitionException0.c);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertNotNull(recognitionException0);
      
      recognitionException0.c = 32;
      List<String> list0 = BaseRecognizer.getRuleInvocationStack((Throwable) recognitionException0, "\u0001\u00DE");
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(101, recognitionException0.index);
      assertEquals(0, recognitionException0.line);
      assertEquals(32, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertFalse(list0.contains("\u0001\u00DE"));
      assertNotNull(list0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream1).getCharPositionInLine();
      doReturn(0).when(charStream1).getLine();
      doReturn(0, 0).when(charStream1).LA(anyInt());
      doReturn(0).when(charStream1).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream1);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(41, SQLLexer.IS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(38, SQLLexer.GE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(60, SQLLexer.WS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__103();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(31, SQLLexer.OR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(38, SQLLexer.GE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(60, SQLLexer.WS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(43, SQLLexer.IN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mNOT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(38, SQLLexer.GE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(40, SQLLexer.LE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(43, SQLLexer.IN);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__115();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(490).when(charStream0).getCharPositionInLine();
      doReturn(490).when(charStream0).getLine();
      doReturn(490, 490).when(charStream0).LA(anyInt());
      doReturn(490).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(490, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(490, sQLLexer0.getCharPositionInLine());
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(4, SQLLexer.INT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__135();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(2881, 2881, 2881).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.text = "\"8p|";
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertNotNull(sQLLexer0);
      
      recognizerSharedState0.tokenStartCharIndex = 389;
      recognizerSharedState0.backtracking = 75;
      sQLLexer0.mT__91();
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(91, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      
      sQLLexer0.mCREATE_SEQUENCE();
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(91, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      
      sQLLexer0.mT__130();
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(130, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      
      sQLLexer0.mNVARCHAR2();
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(389, recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(54, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(31, SQLLexer.OR);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(39, SQLLexer.LT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mVARCHAR2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(60, SQLLexer.WS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(32, SQLLexer.AND);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertNotNull(sQLLexer0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer1 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(43, SQLLexer.IN);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(40, SQLLexer.LE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(57, SQLLexer.DATE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      sQLLexer0.mCOMMENT_COLUMN();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(60, SQLLexer.WS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(32, SQLLexer.AND);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertFalse(sQLLexer0.equals((Object)sQLLexer1));
      assertNotSame(sQLLexer0, sQLLexer1);
      
      try { 
        sQLLexer1.mT__92();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(114, SQLLexer.T__114);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(38, SQLLexer.GE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__137();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1651)).when(charStream0).getCharPositionInLine();
      doReturn(1991).when(charStream0).getLine();
      doReturn((-1651), 1991).when(charStream0).LA(anyInt());
      doReturn(70).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(39, SQLLexer.LT);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertNotNull(sQLLexer0);
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertNotNull(recognitionException0);
      
      SQLLexer sQLLexer1 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals((-1651), sQLLexer1.getCharPositionInLine());
      assertFalse(sQLLexer1.failed());
      assertEquals(1991, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(60, SQLLexer.WS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      try { 
        sQLLexer1.mAND();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(1305).when(charStream0).getCharPositionInLine();
      doReturn(1305).when(charStream0).getLine();
      doReturn(1305, 1305).when(charStream0).LA(anyInt());
      doReturn(3207).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertFalse(sQLLexer0.failed());
      assertEquals(1305, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(1305, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__95();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__104();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(490).when(charStream0).getCharPositionInLine();
      doReturn(490).when(charStream0).getLine();
      doReturn(490, 490).when(charStream0).LA(anyInt());
      doReturn(490).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(490, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(490, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(39, SQLLexer.LT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(38, SQLLexer.GE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(65, SQLLexer.T__65);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__66();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(43, SQLLexer.IN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(60, SQLLexer.WS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(32, SQLLexer.AND);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(4, SQLLexer.INT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(41, SQLLexer.IS);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__133();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null, recognizerSharedState1);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(39, SQLLexer.LT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mDROP_SEQUENCE();
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(39, SQLLexer.LT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(9).when(charStream0).getCharPositionInLine();
      doReturn(9).when(charStream0).getLine();
      doReturn(9, 9).when(charStream0).LA(anyInt());
      doReturn(9).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertEquals(9, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(9, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(57, SQLLexer.DATE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(40, SQLLexer.LE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__101();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(37, SQLLexer.GT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(40, SQLLexer.LE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(60, SQLLexer.WS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(39, SQLLexer.LT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertNotNull(sQLLexer0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(84, 82).when(charStream0).getCharPositionInLine();
      doReturn(105, 38).when(charStream0).getLine();
      doReturn(2792, 115, 96, 0, 0).when(charStream0).LA(anyInt());
      doReturn(95, (-2898), 0).when(charStream0).index();
      doReturn((-1)).when(charStream0).mark();
      SQLLexer sQLLexer1 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(84, sQLLexer1.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(105, sQLLexer1.getLine());
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(40, SQLLexer.LE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(39, SQLLexer.LT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      CommonToken commonToken0 = (CommonToken)sQLLexer1.nextToken();
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(82, sQLLexer1.getCharPositionInLine());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer1.failed());
      assertEquals(38, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-2899), commonToken0.getStopIndex());
      assertEquals(38, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(82, commonToken0.getCharPositionInLine());
      assertEquals(6, commonToken0.getType());
      assertEquals(95, commonToken0.getStartIndex());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(82, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(38, recognizerSharedState0.tokenStartLine);
      assertEquals(95, recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(6, recognizerSharedState0.type);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(40, SQLLexer.LE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(39, SQLLexer.LT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotSame(sQLLexer1, sQLLexer0);
      assertNotNull(commonToken0);
      
      try { 
        sQLLexer1.mT__86();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(116, SQLLexer.T__116);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__74();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(38, SQLLexer.GE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(39, SQLLexer.LT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mPLUS();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(32, SQLLexer.AND);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__86();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(7, SQLLexer.STRING);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(37, SQLLexer.GT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mOR();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(67, SQLLexer.T__67);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(40, SQLLexer.LE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(60, SQLLexer.WS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mEQ();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(131).when(charStream0).getCharPositionInLine();
      doReturn(131).when(charStream0).getLine();
      doReturn(131, (-3303)).when(charStream0).LA(anyInt());
      doReturn(131).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(131, sQLLexer0.getLine());
      assertEquals(131, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(4, SQLLexer.INT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__79();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(41, SQLLexer.IS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(43, SQLLexer.IN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(60, SQLLexer.WS);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(32, SQLLexer.AND);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__77();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(32, SQLLexer.AND);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertNotNull(sQLLexer0);
      
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intStream0).LA(anyInt());
      doReturn(0).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertNotNull(recognitionException0);
      
      List<String> list0 = BaseRecognizer.getRuleInvocationStack((Throwable) recognitionException0, "\u0001\u00DE");
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertFalse(list0.contains("\u0001\u00DE"));
      assertNotNull(list0);
      
      try { 
        sQLLexer0.mT__79();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__133();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertNotNull(sQLLexer0);
      
      SQLLexer sQLLexer1 = new SQLLexer((CharStream) null);
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(40, SQLLexer.LE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(41, SQLLexer.IS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(31, SQLLexer.OR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(39, SQLLexer.LT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(32, SQLLexer.AND);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      // Undeclared exception!
      try { 
        sQLLexer1.mT__131();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(37, SQLLexer.GT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(4, SQLLexer.INT);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mBETWEEN();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(40, SQLLexer.LE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.matchAny();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(40, SQLLexer.LE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      
      try { 
        sQLLexer0.mOR();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(40, SQLLexer.LE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(39, SQLLexer.LT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__76();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mGE();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-320)).when(charStream0).getCharPositionInLine();
      doReturn((-320)).when(charStream0).getLine();
      doReturn(79, 79).when(charStream0).LA(anyInt());
      doReturn(196).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.text = "\"8p|";
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals((-320), sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals((-320), sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(39, SQLLexer.LT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(41, SQLLexer.IS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mGE();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(64).when(charStream0).getCharPositionInLine();
      doReturn(64).when(charStream0).getLine();
      doReturn((-93), 92).when(charStream0).LA(anyInt());
      doReturn(90).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertEquals(64, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(64, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(43, SQLLexer.IN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(37, SQLLexer.GT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(38, SQLLexer.GE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__114();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(78, SQLLexer.T__78);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(4, SQLLexer.INT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(41, SQLLexer.IS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__99();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(109, SQLLexer.T__109);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mINVOCATION();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(109, SQLLexer.T__109);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      
      sQLLexer0.mALTER_TABLE();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(109, SQLLexer.T__109);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      sQLLexer0.mNAME_LIST();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(109, SQLLexer.T__109);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      try { 
        sQLLexer0.mT__85();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(38, SQLLexer.GE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(39, SQLLexer.LT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(37, SQLLexer.GT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertNotNull(sQLLexer0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer1 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(60, SQLLexer.WS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(39, SQLLexer.LT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      try { 
        sQLLexer1.mT__94();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(39, SQLLexer.LT);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(37, SQLLexer.GT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(4, SQLLexer.INT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__85();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(5, SQLLexer.NOT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(4, SQLLexer.INT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(38, SQLLexer.GE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(41, SQLLexer.IS);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__97();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(32, SQLLexer.AND);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__117();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(5, SQLLexer.NOT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__76();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(37, SQLLexer.GT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(31, SQLLexer.OR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__91();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.charPositionInLine);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.index);
      assertNotNull(recognitionException0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(40, SQLLexer.LE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(37, SQLLexer.GT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mCOLUMN_NAME();
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(40, SQLLexer.LE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(37, SQLLexer.GT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      
      try { 
        sQLLexer0.mPERCENT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(68, SQLLexer.T__68);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(38, SQLLexer.GE);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(43, SQLLexer.IN);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(32, SQLLexer.AND);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(31, SQLLexer.OR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__83();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(2881, 2881, 2881, (-320), 125).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.text = "\"8p|";
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(37, SQLLexer.GT);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(57, SQLLexer.DATE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertNotNull(sQLLexer0);
      
      recognizerSharedState0.tokenStartCharIndex = 108;
      recognizerSharedState0.backtracking = 75;
      sQLLexer0.mT__78();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(78, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(108, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(37, SQLLexer.GT);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(57, SQLLexer.DATE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      
      recognizerSharedState0.lastErrorIndex = 21;
      sQLLexer0.mT__67();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(67, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(21, recognizerSharedState0.lastErrorIndex);
      assertEquals(108, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(37, SQLLexer.GT);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(57, SQLLexer.DATE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      
      sQLLexer0.mDEFAULT();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(10, recognizerSharedState0.type);
      assertEquals(21, recognizerSharedState0.lastErrorIndex);
      assertEquals(108, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(37, SQLLexer.GT);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(57, SQLLexer.DATE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      
      sQLLexer0.mT__83();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals(83, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(21, recognizerSharedState0.lastErrorIndex);
      assertEquals(108, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(37, SQLLexer.GT);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(57, SQLLexer.DATE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      
      sQLLexer0.mT__108();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(21, recognizerSharedState0.lastErrorIndex);
      assertEquals(108, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(108, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(37, SQLLexer.GT);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(57, SQLLexer.DATE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      
      sQLLexer0.mT__104();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(21, recognizerSharedState0.lastErrorIndex);
      assertEquals(108, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(104, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(37, SQLLexer.GT);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(57, SQLLexer.DATE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      
      sQLLexer0.mGE();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(75, sQLLexer0.getBacktrackingLevel());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(75, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(21, recognizerSharedState0.lastErrorIndex);
      assertEquals(108, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(38, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(37, SQLLexer.GT);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(57, SQLLexer.DATE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(63, SQLLexer.T__63);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(40, SQLLexer.LE);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mCOMMENT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(32, SQLLexer.AND);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(4, SQLLexer.INT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(31, SQLLexer.OR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__62();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(4, SQLLexer.INT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(117, SQLLexer.T__117);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(72, SQLLexer.T__72);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__131();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(43, SQLLexer.IN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(32, SQLLexer.AND);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(37, SQLLexer.GT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertNotNull(sQLLexer0);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertNotNull(recognitionException0);
      
      String string0 = recognitionException0.getLocalizedMessage();
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertNull(string0);
      
      List<String> list0 = BaseRecognizer.getRuleInvocationStack((Throwable) recognitionException0, (String) null);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertNotNull(list0);
      
      try { 
        sQLLexer0.mT__130();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(215).when(charStream0).getCharPositionInLine();
      doReturn(215).when(charStream0).getLine();
      doReturn(47, 215, 9, 215, 9).when(charStream0).LA(anyInt());
      doReturn(9).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(215, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(215, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(68, SQLLexer.T__68);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(39, SQLLexer.LT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(42, SQLLexer.NULL);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(60, SQLLexer.WS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(32, SQLLexer.AND);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mWS();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(4, SQLLexer.INT);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(41, SQLLexer.IS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(31, SQLLexer.OR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(43, SQLLexer.IN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(32, SQLLexer.AND);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mNVARCHAR2();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__126();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(39, SQLLexer.LT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(38, SQLLexer.GE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mCHAR();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(charStream0).getCharPositionInLine();
      doReturn(0, 0, 0).when(charStream0).getLine();
      doReturn(0, 0, 0, 0, 0).when(charStream0).LA(anyInt());
      doReturn((String) null).when(charStream0).getSourceName();
      doReturn(0, 0, 0, 0, 0).when(charStream0).index();
      doReturn(0, 0).when(charStream0).mark();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      
      recognizerSharedState0.backtracking = 100;
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(100, recognizerSharedState1.backtracking);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(57, SQLLexer.DATE);
      
      sQLLexer0.mT__64();
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(64, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(57, SQLLexer.DATE);
      
      CommonToken commonToken0 = (CommonToken)sQLLexer0.nextToken();
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getStopIndex());
      assertEquals(64, commonToken0.getType());
      assertEquals(0, commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(64, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(57, SQLLexer.DATE);
      
      recognizerSharedState1.channel = 74;
      sQLLexer0.mAND();
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(32, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(57, SQLLexer.DATE);
      
      recognizerSharedState1.lastErrorIndex = 99;
      recognizerSharedState1.tokenStartCharPositionInLine = 77;
      CommonToken commonToken1 = (CommonToken)sQLLexer0.emit();
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, commonToken1.getLine());
      assertEquals((-1), commonToken1.getTokenIndex());
      assertEquals(0, commonToken1.getChannel());
      assertEquals((-1), commonToken1.getStopIndex());
      assertEquals(0, commonToken1.getStartIndex());
      assertEquals(77, commonToken1.getCharPositionInLine());
      assertEquals(32, commonToken1.getType());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(32, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertEquals(99, recognizerSharedState1.lastErrorIndex);
      assertEquals(77, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(57, SQLLexer.DATE);
      
      CommonToken commonToken2 = (CommonToken)sQLLexer0.nextToken();
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1), commonToken2.getTokenIndex());
      assertEquals((-1), commonToken2.getStopIndex());
      assertEquals(32, commonToken2.getType());
      assertEquals(0, commonToken2.getLine());
      assertEquals(0, commonToken2.getStartIndex());
      assertEquals(0, commonToken2.getChannel());
      assertEquals(0, commonToken2.getCharPositionInLine());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(32, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertEquals(99, recognizerSharedState1.lastErrorIndex);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(57, SQLLexer.DATE);
      
      sQLLexer0.mINVOCATION();
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(32, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertEquals(99, recognizerSharedState1.lastErrorIndex);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(57, SQLLexer.DATE);
      
      sQLLexer0.mPRIMARY();
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(9, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertEquals(99, recognizerSharedState1.lastErrorIndex);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(57, SQLLexer.DATE);
      
      sQLLexer0.mT__97();
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(97, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertEquals(99, recognizerSharedState1.lastErrorIndex);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(57, SQLLexer.DATE);
      
      sQLLexer0.mT__116();
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertEquals(99, recognizerSharedState1.lastErrorIndex);
      assertEquals(116, recognizerSharedState1.type);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(57, SQLLexer.DATE);
      
      sQLLexer0.mT__108();
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(108, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertEquals(99, recognizerSharedState1.lastErrorIndex);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(57, SQLLexer.DATE);
      
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(intStream0).LA(anyInt());
      doReturn(0).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      
      BitSet bitSet0 = BitSet.of(447, 0, 7);
      assertEquals(448, bitSet0.numBits());
      assertEquals(7, bitSet0.lengthInLongWords());
      assertFalse(bitSet0.isNil());
      assertEquals(3, bitSet0.size());
      
      sQLLexer0.recoverFromMismatchedSet(intStream0, recognitionException0, bitSet0);
      assertEquals(448, bitSet0.numBits());
      assertEquals(7, bitSet0.lengthInLongWords());
      assertFalse(bitSet0.isNil());
      assertEquals(3, bitSet0.size());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(108, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertEquals(99, recognizerSharedState1.lastErrorIndex);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(57, SQLLexer.DATE);
      
      sQLLexer0.traceOut((String) null, 0, (Object) null);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(108, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertEquals(99, recognizerSharedState1.lastErrorIndex);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(57, SQLLexer.DATE);
      
      sQLLexer0.mNULL();
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(100, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartCharIndex);
      assertEquals(42, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(100, recognizerSharedState1.backtracking);
      assertEquals(99, recognizerSharedState1.lastErrorIndex);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(53, SQLLexer.VARCHAR2);
      
      sQLLexer0.mT__126();
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      
      sQLLexer0.mNAME_LIST();
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      
      sQLLexer0.mT__96();
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      
      sQLLexer0.mVALUE_LIST();
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      
      sQLLexer0.mT__137();
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(100, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      
      try { 
        sQLLexer0.mWS();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(134, SQLLexer.T__134);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(43, SQLLexer.IN);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(32, SQLLexer.AND);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__86();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertNotNull(sQLLexer0);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream1).getCharPositionInLine();
      doReturn(0).when(charStream1).getLine();
      doReturn(0, 0).when(charStream1).LA(anyInt());
      doReturn(0).when(charStream1).index();
      SQLLexer sQLLexer1 = new SQLLexer(charStream1);
      assertFalse(sQLLexer1.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(43, SQLLexer.IN);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(41, SQLLexer.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(38, SQLLexer.GE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      try { 
        sQLLexer1.mLE();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(43, SQLLexer.IN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__126();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(4, SQLLexer.INT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(40, SQLLexer.LE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(136, SQLLexer.T__136);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(32, SQLLexer.AND);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mSLASH();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(68, SQLLexer.T__68);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(32, SQLLexer.AND);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__69();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(37, SQLLexer.GT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(40, SQLLexer.LE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(43, SQLLexer.IN);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mINVOCATION();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(37, SQLLexer.GT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(40, SQLLexer.LE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(43, SQLLexer.IN);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      
      sQLLexer0.mALTER_TABLE();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(37, SQLLexer.GT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(40, SQLLexer.LE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(43, SQLLexer.IN);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      
      try { 
        sQLLexer0.mT__88();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(32, SQLLexer.AND);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(43, SQLLexer.IN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(41, SQLLexer.IS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(31, SQLLexer.OR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__66();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(32, SQLLexer.AND);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(60, SQLLexer.WS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(4, SQLLexer.INT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mBETWEEN();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(32, SQLLexer.AND);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(43, SQLLexer.IN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mTABLE_DETAILS();
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(32, SQLLexer.AND);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(43, SQLLexer.IN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      
      sQLLexer0.mARGUMENTS();
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(32, SQLLexer.AND);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(43, SQLLexer.IN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(100).when(intStream0).LA(anyInt());
      doReturn(101).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(101, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertEquals(100, recognitionException0.c);
      assertNotNull(recognitionException0);
      
      recognitionException0.c = 32;
      List<String> list0 = BaseRecognizer.getRuleInvocationStack((Throwable) recognitionException0, "\u0001\u00DE");
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(32, recognitionException0.c);
      assertEquals(101, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertFalse(list0.contains("\u0001\u00DE"));
      assertNotNull(list0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mIS();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(39, SQLLexer.LT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(31, SQLLexer.OR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, SQLLexer.GE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__135();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(60, SQLLexer.WS);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(40, SQLLexer.LE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mOR();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(40, SQLLexer.LE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(32, SQLLexer.AND);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(41, SQLLexer.IS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(39, SQLLexer.LT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertNotNull(sQLLexer0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__67();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(37, SQLLexer.GT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__123();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(47, SQLLexer.STAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(41, SQLLexer.IS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(40, SQLLexer.LE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertNotNull(sQLLexer0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer1 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertFalse(sQLLexer1.failed());
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(43, SQLLexer.IN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(38, SQLLexer.GE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer1);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(165, 1665).when(charStream1).getCharPositionInLine();
      doReturn(95, (-166)).when(charStream1).getLine();
      doReturn(93, 53, 97, 0).when(charStream1).LA(anyInt());
      doReturn("nextToken", (String) null).when(charStream1).getSourceName();
      doReturn((-199), 57).when(charStream1).index();
      doReturn(103).when(charStream1).mark();
      SQLLexer sQLLexer2 = new SQLLexer(charStream1, recognizerSharedState0);
      assertEquals(0, sQLLexer2.getBacktrackingLevel());
      assertEquals(0, sQLLexer2.getNumberOfSyntaxErrors());
      assertEquals(95, sQLLexer2.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer2.getGrammarFileName());
      assertFalse(sQLLexer2.failed());
      assertEquals(0, sQLLexer2.getRuleMemoizationCacheSize());
      assertEquals(165, sQLLexer2.getCharPositionInLine());
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(39, SQLLexer.LT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(133, SQLLexer.T__133);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(135, SQLLexer.T__135);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertFalse(sQLLexer2.equals((Object)sQLLexer1));
      assertFalse(sQLLexer2.equals((Object)sQLLexer0));
      assertNotNull(sQLLexer2);
      
      // Undeclared exception!
      try { 
        sQLLexer2.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SQLLexer error
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(39, SQLLexer.LT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(32, SQLLexer.AND);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mPLUS();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = null;
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream1).getCharPositionInLine();
      doReturn(0).when(charStream1).getLine();
      doReturn(0, 0).when(charStream1).LA(anyInt());
      doReturn(0).when(charStream1).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream1, (RecognizerSharedState) null);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(32, SQLLexer.AND);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(114, SQLLexer.T__114);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__76();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__80();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.errorRecovery = false;
      recognizerSharedState0.channel = 253;
      recognizerSharedState0.tokenStartCharPositionInLine = (-1020);
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1020), recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(253, recognizerSharedState0.channel);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(60, SQLLexer.WS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(41, SQLLexer.IS);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__84();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(4, SQLLexer.INT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(40, SQLLexer.LE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(48, SQLLexer.SLASH);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__94();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-149)).when(charStream1).getCharPositionInLine();
      doReturn(4014).when(charStream1).getLine();
      doReturn((-1), 0).when(charStream1).LA(anyInt());
      doReturn(177).when(charStream1).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream1, recognizerSharedState0);
      assertEquals(4014, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-149), sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(41, SQLLexer.IS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(31, SQLLexer.OR);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(40, SQLLexer.LE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(60, SQLLexer.WS);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(43, SQLLexer.IN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mQUOTED_NAME();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1463)).when(charStream0).getCharPositionInLine();
      doReturn((-1463)).when(charStream0).getLine();
      doReturn((-1463), (-1190)).when(charStream0).LA(anyInt());
      doReturn((-1190)).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals((-1463), sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals((-1463), sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertNotNull(sQLLexer0);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      try { 
        sQLLexer0.mT__108();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(38, SQLLexer.GE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(43, SQLLexer.IN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mNOT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mIS();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(38, SQLLexer.GE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(31, SQLLexer.OR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__109();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(37, SQLLexer.GT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(60, SQLLexer.WS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(75, SQLLexer.T__75);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(31, SQLLexer.OR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__84();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }
}

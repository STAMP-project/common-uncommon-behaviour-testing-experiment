/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 05 12:30:51 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.ImageProducer;
import javax.swing.JApplet;
import jigl.image.ColorModel;
import jigl.image.ROI;
import jigl.image.types.RealColorImage;
import jigl.image.types.RealGrayImage;
import jigl.internal.DummyObserver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RealColorImage_ESTest extends RealColorImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage0.addbuffer((-810), (-377), floatArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage0.subtract(floatArray0, (ROI) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI((-356), 812, (-2654), 777);
      assertEquals(812, rOI0.ly());
      assertEquals(777, rOI0.uy());
      assertEquals(36, rOI0.Y());
      assertEquals(2299, rOI0.X());
      assertEquals((-2654), rOI0.ux());
      assertEquals((-356), rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.byteSize(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(1, 1);
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (float) 832;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) 1;
      floatArray0[7] = (float) 832;
      // Undeclared exception!
      try { 
        realColorImage0.add(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(2, (float) 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(3, (float) 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      int int0 = 294;
      RealColorImage realColorImage1 = new RealColorImage(294, 294);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(294, realColorImage1.X());
      assertEquals(294, realColorImage1.Y());
      assertNotNull(realColorImage1);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(realColorImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      Float[] floatArray0 = new Float[0];
      // Undeclared exception!
      try { 
        realColorImage0.clear(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ColorModel colorModel0 = realColorImage0.getColorModel();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, colorModel0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.clip(838, 838);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 804;
      BufferedImage bufferedImage0 = new BufferedImage(804, 804, 3);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(804, bufferedImage0.getHeight());
      assertEquals(804, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(804, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getType());
      assertEquals(804, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertNotNull(bufferedImage0);
      
      RealColorImage realColorImage0 = new RealColorImage(bufferedImage0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(320, (float) 320, (ROI) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 320
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertNotNull(rOI1);
      
      ROI rOI2 = new ROI();
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertNotNull(rOI2);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(0.0F, (-199.51228F), 0.0F, rOI2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealGrayImage[] realGrayImageArray0 = new RealGrayImage[0];
      realColorImage0.planes = realGrayImageArray0;
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(realColorImage0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.diff(realColorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 3439;
      floatArray0[1] = (float) 3439;
      // Undeclared exception!
      realColorImage0.addbuffer(3439, 3439, floatArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = 2480;
      int int1 = 1079;
      RealColorImage realColorImage1 = new RealColorImage();
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(realColorImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(758, 829);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(758, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(829, realColorImage1.Y());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage1.multiply(808, 838, 936.318F, (float) 758, 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 838
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      Float[] floatArray0 = new Float[1];
      // Undeclared exception!
      try { 
        realColorImage0.clear(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      DummyObserver dummyObserver0 = new DummyObserver();
      assertNotNull(dummyObserver0);
      
      DummyObserver.dummy = dummyObserver0;
      float[] floatArray0 = new float[0];
      ROI rOI0 = new ROI(0, 8, 12, 487);
      assertEquals(480, rOI0.Y());
      assertEquals(8, rOI0.uy());
      assertEquals(487, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(13, rOI0.X());
      assertEquals(12, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(255, 0, 255.0F, (-3074.3552F), 255.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(2395, 2395);
      assertEquals(2395, realColorImage0.Y());
      assertEquals(2395, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((float) 811);
      assertEquals(811.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      float[] floatArray1 = new float[9];
      floatArray1[0] = (float) 2;
      floatArray1[1] = (float) 255;
      floatArray1[2] = (float) 2;
      floatArray1[3] = (float) 2;
      floatArray1[4] = (float) 2;
      floatArray1[5] = (float) floatArray0[0];
      floatArray1[6] = 0.0F;
      floatArray1[7] = (float) 255;
      floatArray1[8] = (float) floatArray0[0];
      RealColorImage realColorImage1 = realColorImage0.addbuffer(3, 255, 2, 2, floatArray1);
      assertArrayEquals(new float[] {2.0F, 255.0F, 2.0F, 2.0F, 2.0F, 811.0F, 0.0F, 255.0F, 811.0F}, floatArray1, 0.01F);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(2395, realColorImage0.Y());
      assertEquals(2395, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(3, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(255, realColorImage1.Y());
      assertEquals(9, floatArray1.length);
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotNull(realColorImage1);
      
      Float float1 = new Float((-32768.0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-32768.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.set(811, (-2129), floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2129
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      int int0 = 805;
      // Undeclared exception!
      try { 
        realColorImage0.addbuffer(805, 805, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(16, 818);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(16, realColorImage0.X());
      assertEquals(818, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 818;
      floatArray0[1] = (float) 818;
      floatArray0[2] = (float) 818;
      floatArray0[3] = (float) 16;
      floatArray0[4] = (float) 16;
      // Undeclared exception!
      try { 
        realColorImage0.multiply(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      int int0 = 546;
      RealColorImage realColorImage1 = new RealColorImage(760, 2942);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(760, realColorImage1.X());
      assertEquals(2942, realColorImage1.Y());
      assertNotNull(realColorImage1);
      
      // Undeclared exception!
      try { 
        realColorImage1.multiply(546, 2942, (-1410.8671F), 0.0F, 1141.3115F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2942
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI(3792, 3792, 3792, 0);
      assertEquals(0, rOI0.uy());
      assertEquals(3792, rOI0.lx());
      assertEquals(3792, rOI0.ly());
      assertEquals(3793, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(3792, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = (-2036);
      rOI0.setROI(1768, (-1923), 2, (-2829));
      assertEquals(907, rOI0.Y());
      assertEquals(1767, rOI0.X());
      assertEquals(2, rOI0.ux());
      assertEquals((-2829), rOI0.uy());
      assertEquals((-1923), rOI0.ly());
      assertEquals(1768, rOI0.lx());
      
      rOI0.setROI((-1286), (-2036), 1768, 1768);
      assertEquals((-1286), rOI0.ux());
      assertEquals(3805, rOI0.Y());
      assertEquals(3055, rOI0.X());
      assertEquals(1768, rOI0.ly());
      assertEquals(1768, rOI0.lx());
      assertEquals((-2036), rOI0.uy());
      
      // Undeclared exception!
      try { 
        realColorImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 1;
      RealColorImage realColorImage0 = new RealColorImage(5, 1);
      assertEquals(5, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      String string0 = realColorImage0.toString();
      assertEquals(5, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.Y());
      assertEquals("5:1\nnull \nnull \nnull \nnull \nnull \n5:1\nnull \nnull \nnull \nnull \nnull \n5:1\nnull \nnull \nnull \nnull \nnull \n", string0);
      assertNotNull(string0);
      
      int int1 = 2926;
      int int2 = 128;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 5;
      floatArray0[1] = (float) 128;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      RealColorImage realColorImage1 = realColorImage0.addbuffer(2926, 1, 128, 128, floatArray0);
      assertArrayEquals(new float[] {5.0F, 128.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(5, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1, realColorImage1.Y());
      assertEquals(2926, realColorImage1.X());
      assertEquals(4, floatArray0.length);
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotNull(realColorImage1);
      
      // Undeclared exception!
      try { 
        realColorImage0.maxComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      DummyObserver dummyObserver0 = DummyObserver.dummy;
      assertNotNull(dummyObserver0);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide((-724), 1719.624F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -724
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      int int0 = realColorImage0.X();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, int0);
      
      ColorModel colorModel0 = ColorModel.CMY;
      realColorImage0.setColorModel(colorModel0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.CMY, realColorImage0.getColorModel());
      
      int int1 = realColorImage0.Y();
      assertTrue(int1 == int0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.CMY, realColorImage0.getColorModel());
      assertEquals(0, int1);
      
      float float0 = 3.4028235E38F;
      int int2 = 3;
      ROI rOI0 = new ROI(0, 3, 0, 8);
      assertEquals(8, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(3, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(6, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(3.4028235E38F, (float) 0, (float) 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(826, 693);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(826, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(693, realColorImage1.Y());
      assertNotNull(realColorImage1);
      
      // Undeclared exception!
      realColorImage1.toString();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      rOI0.setROI((-2764), 8, (-2764), (-1));
      assertEquals((-1), rOI0.uy());
      assertEquals(10, rOI0.Y());
      assertEquals((-2764), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-2764), rOI0.ux());
      assertEquals(8, rOI0.ly());
      
      rOI0.setROI(8, 3969, 3969, 3969);
      assertEquals(3962, rOI0.X());
      assertEquals(3969, rOI0.lx());
      assertEquals(3969, rOI0.ly());
      assertEquals(8, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(3969, rOI0.uy());
      
      rOI0.setROI(8, 8, 8, 8);
      assertEquals(8, rOI0.lx());
      assertEquals(8, rOI0.ux());
      assertEquals(8, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(8, rOI0.ly());
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertNotNull(rOI1);
      
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      int int0 = 810;
      // Undeclared exception!
      try { 
        realColorImage0.multiply(810, (-1276), 0.0F, 2623.1045F, (float) (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      String string0 = realColorImage0.toString();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals("0:0\n0:0\n0:0\n", string0);
      assertNotNull(string0);
      
      Float float0 = realColorImage0.maxComponent();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals((-32768.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float[] floatArray0 = new float[6];
      RealColorImage realColorImage1 = realColorImage0.addbuffer(0, 476, 476, 0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(476, realColorImage1.Y());
      assertEquals(6, floatArray0.length);
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotNull(realColorImage1);
      
      ImageProducer imageProducer0 = realColorImage0.getJavaImage();
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotSame(realColorImage0, realColorImage1);
      assertNotNull(imageProducer0);
      
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      ImageProducer imageProducer1 = realColorImage0.getJavaImage();
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(imageProducer1.equals((Object)imageProducer0));
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(imageProducer1, imageProducer0);
      assertNotNull(imageProducer1);
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      rOI0.setROI(959, 128, 803, (-1123));
      assertEquals(1252, rOI0.Y());
      assertEquals((-1123), rOI0.uy());
      assertEquals(959, rOI0.lx());
      assertEquals(128, rOI0.ly());
      assertEquals(803, rOI0.ux());
      assertEquals(157, rOI0.X());
      
      rOI0.setROI(0, 123, 128, 0);
      assertEquals(128, rOI0.lx());
      assertEquals(123, rOI0.ly());
      assertEquals(129, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(124, rOI0.Y());
      
      int int0 = realColorImage1.Y();
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(476, realColorImage1.Y());
      assertEquals(6, floatArray0.length);
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      assertEquals(476, int0);
      
      rOI0.setROI(1054, 833, 3759, 476);
      assertEquals(358, rOI0.Y());
      assertEquals(833, rOI0.ly());
      assertEquals(3759, rOI0.lx());
      assertEquals(1054, rOI0.ux());
      assertEquals(476, rOI0.uy());
      assertEquals(2706, rOI0.X());
      
      rOI0.setROI(0, 128, 0, 803);
      assertEquals(676, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(803, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(128, rOI0.uy());
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 128
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.subtract(0, (-1.0F));
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertNotNull(realColorImage1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (-1.0F);
      RealColorImage realColorImage2 = realColorImage1.addbuffer(16, 0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(16, realColorImage2.X());
      assertEquals(0, realColorImage2.Y());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(4, floatArray0.length);
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage2);
      assertSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage2, realColorImage1);
      assertNotSame(realColorImage2, realColorImage0);
      assertNotNull(realColorImage2);
      
      RealColorImage realColorImage3 = realColorImage1.multiply(32767.0F, (-1191.2369F), 255.0F);
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertFalse(realColorImage3.equals((Object)realColorImage2));
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage3.Y());
      assertEquals(ColorModel.RGB, realColorImage3.getColorModel());
      assertEquals(0, realColorImage3.X());
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage3);
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage2);
      assertSame(realColorImage1, realColorImage0);
      assertSame(realColorImage1, realColorImage3);
      assertNotSame(realColorImage3, realColorImage2);
      assertSame(realColorImage3, realColorImage0);
      assertSame(realColorImage3, realColorImage1);
      assertNotNull(realColorImage3);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 1129;
      RealColorImage realColorImage0 = new RealColorImage(1129, 8);
      assertEquals(1129, realColorImage0.X());
      assertEquals(8, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(1129, realColorImage0.X());
      assertEquals(8, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage1.Y());
      assertEquals(1129, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      String string0 = realColorImage0.toString(rOI0);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertEquals(1129, realColorImage0.X());
      assertEquals(8, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertNotSame(realColorImage0, realColorImage1);
      assertEquals("1129:8\nnull \n1129:8\nnull \n1129:8\nnull \n", string0);
      assertNotNull(string0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((double) 8);
      assertEquals(8.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      RealGrayImage[] realGrayImageArray0 = new RealGrayImage[5];
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage0.addbuffer(813, 813, 813, 813, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(807, 807);
      assertEquals(807, realColorImage0.X());
      assertEquals(807, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      int int0 = (-633);
      ROI rOI0 = new ROI(2147418112, 799, (-820), (-633));
      assertEquals(1433, rOI0.Y());
      assertEquals((-820), rOI0.ux());
      assertEquals(2147418933, rOI0.X());
      assertEquals((-633), rOI0.uy());
      assertEquals(799, rOI0.ly());
      assertEquals(2147418112, rOI0.lx());
      assertNotNull(rOI0);
      
      rOI0.setROI((-633), 807, 799, 1402);
      assertEquals(1402, rOI0.ly());
      assertEquals(1433, rOI0.X());
      assertEquals(596, rOI0.Y());
      assertEquals((-633), rOI0.ux());
      assertEquals(807, rOI0.uy());
      assertEquals(799, rOI0.lx());
      
      // Undeclared exception!
      try { 
        realColorImage0.add((float) 807, (-2978.153F), (float) 807, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 807
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(0, 0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI(0, 975, (-13), 0);
      assertEquals(975, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals((-13), rOI0.ux());
      assertEquals(14, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(976, rOI0.Y());
      assertNotNull(rOI0);
      
      float[] floatArray0 = realColorImage1.addSum();
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(3, floatArray0.length);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotNull(floatArray0);
      
      // Undeclared exception!
      try { 
        realColorImage0.min(975);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 975
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      RealGrayImage[] realGrayImageArray0 = new RealGrayImage[0];
      realColorImage0.planes = realGrayImageArray0;
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      // Undeclared exception!
      try { 
        realColorImage0.absSum();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(70, 70);
      assertEquals(70, realColorImage0.Y());
      assertEquals(70, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      rOI0.setROI((-1450), (-1450), (-4182), (-699));
      assertEquals((-4182), rOI0.ux());
      assertEquals((-1450), rOI0.uy());
      assertEquals(752, rOI0.Y());
      assertEquals(2733, rOI0.X());
      assertEquals((-1450), rOI0.lx());
      assertEquals((-699), rOI0.ly());
      
      rOI0.setROI((-16777216), 70, (-16777216), (-16777216));
      assertEquals((-16777216), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-16777216), rOI0.ux());
      assertEquals(70, rOI0.ly());
      assertEquals((-16777216), rOI0.uy());
      assertEquals(16777287, rOI0.Y());
      
      // Undeclared exception!
      try { 
        realColorImage0.byteSize(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -16777216
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(0, 0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      rOI0.setROI(794, (-4351), 1, 1);
      assertEquals(794, rOI0.lx());
      assertEquals(794, rOI0.X());
      assertEquals(1, rOI0.ly());
      assertEquals((-4351), rOI0.uy());
      assertEquals(1, rOI0.ux());
      assertEquals(4353, rOI0.Y());
      
      RealColorImage realColorImage2 = new RealColorImage();
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertEquals(0, realColorImage2.Y());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(0, realColorImage2.X());
      assertNotNull(realColorImage2);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 794;
      floatArray0[2] = (float) 794;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (-1.0F);
      floatArray0[7] = (float) 0;
      RealColorImage realColorImage3 = realColorImage1.divide(floatArray0);
      assertArrayEquals(new float[] {0.0F, 794.0F, 794.0F, 1.0F, 0.0F, 0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertFalse(realColorImage3.equals((Object)realColorImage0));
      assertFalse(realColorImage3.equals((Object)realColorImage2));
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage3.getColorModel());
      assertEquals(0, realColorImage3.Y());
      assertEquals(0, realColorImage3.X());
      assertEquals(8, floatArray0.length);
      assertNotSame(realColorImage1, realColorImage0);
      assertSame(realColorImage1, realColorImage3);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage3, realColorImage0);
      assertNotSame(realColorImage3, realColorImage2);
      assertSame(realColorImage3, realColorImage1);
      assertNotNull(realColorImage3);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(308, 308);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(308, realColorImage1.X());
      assertEquals(308, realColorImage1.Y());
      assertNotNull(realColorImage1);
      
      ColorModel colorModel0 = ColorModel.YIQ;
      realColorImage1.colorModel = colorModel0;
      assertEquals(ColorModel.YIQ, realColorImage1.getColorModel());
      assertEquals(308, realColorImage1.X());
      assertEquals(308, realColorImage1.Y());
      
      ROI rOI0 = new ROI(308, (-982), (-1442), (-1442));
      assertEquals((-1442), rOI0.ux());
      assertEquals(1751, rOI0.X());
      assertEquals(308, rOI0.lx());
      assertEquals((-1442), rOI0.uy());
      assertEquals(461, rOI0.Y());
      assertEquals((-982), rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      realColorImage1.clear();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      float float0 = 0.0F;
      int int0 = 16;
      int int1 = 903;
      int int2 = (-4396);
      ROI rOI0 = new ROI(16, 903, (-4396), 805);
      assertEquals(805, rOI0.uy());
      assertEquals(4413, rOI0.X());
      assertEquals(99, rOI0.Y());
      assertEquals(16, rOI0.lx());
      assertEquals((-4396), rOI0.ux());
      assertEquals(903, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(0.0F, 0.0F, (-226.62F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 838);
      assertEquals(0, realColorImage0.X());
      assertEquals(838, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ImageProducer imageProducer0 = realColorImage0.getJavaImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(838, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(imageProducer0);
      
      ROI rOI0 = new ROI(838, 838, 0, 838);
      assertEquals(839, rOI0.X());
      assertEquals(838, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(838, rOI0.ly());
      assertEquals(838, rOI0.lx());
      assertNotNull(rOI0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 838;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 838;
      // Undeclared exception!
      try { 
        realColorImage0.subtract(0, 0, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1938.5F);
      floatArray0[2] = 3560.96F;
      floatArray0[3] = 605.0F;
      floatArray0[4] = 255.0F;
      // Undeclared exception!
      try { 
        realColorImage0.subtract(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage0.divide(floatArray0, (ROI) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.addbuffer((-216), (-216), (-216), (-216), (float[]) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[2];
      // Undeclared exception!
      try { 
        realColorImage0.add(floatArray0, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(1644, 843);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1644, realColorImage0.X());
      assertEquals(843, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.plane(1644);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1644
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      int int0 = 770;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 770;
      floatArray0[1] = (float) 770;
      DummyObserver dummyObserver0 = new DummyObserver();
      assertNotNull(dummyObserver0);
      
      DummyObserver.dummy = dummyObserver0;
      floatArray0[2] = (float) 770;
      floatArray0[3] = (float) 770;
      // Undeclared exception!
      try { 
        realColorImage0.addbuffer(770, 770, 770, 770, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.add(realColorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(815, (-1636.0F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 815
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ColorModel colorModel0 = ColorModel.CMY;
      realColorImage0.setColorModel(colorModel0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.CMY, realColorImage0.getColorModel());
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((double) (-2431));
      assertEquals((-2431.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      // Undeclared exception!
      try { 
        realColorImage0.add((-2431), 827, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(0, 0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertNotNull(realColorImage1);
      
      RealColorImage realColorImage2 = new RealColorImage();
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertEquals(0, realColorImage2.X());
      assertEquals(0, realColorImage2.Y());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertNotNull(realColorImage2);
      
      // Undeclared exception!
      try { 
        realColorImage2.divide((-530), (-3917), (float) (-530), (float) 0, 745.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      int int0 = 767;
      int int1 = 16;
      // Undeclared exception!
      try { 
        realColorImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.set(14, 14, (Float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(838, (float) 838);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 838
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage0.divide(802, 802, floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      ColorModel colorModel0 = ColorModel.YIQ;
      realColorImage0.colorModel = colorModel0;
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.YIQ, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = 5;
      RealColorImage realColorImage1 = new RealColorImage(5, 5);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(5, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(5, realColorImage1.X());
      assertNotNull(realColorImage1);
      
      int int1 = (-2122);
      float float0 = (-690.62F);
      float float1 = 1.0F;
      // Undeclared exception!
      try { 
        realColorImage1.add((-2122), 5, (float) 5, (-690.62F), 1.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.max(104, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 104
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(470, 470);
      assertEquals(470, realColorImage0.Y());
      assertEquals(470, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      String string0 = realColorImage0.toString(rOI0);
      assertEquals(470, realColorImage0.Y());
      assertEquals(470, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals("470:470\nnull \n470:470\nnull \n470:470\nnull \n", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 470;
      // Undeclared exception!
      try { 
        realColorImage0.addbuffer(470, 6, 5, 5, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(0, (float) (-1658), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.add((-38), 8, 0.0F, (float) 838, 3.4028235E38F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 350;
      RealColorImage realColorImage0 = new RealColorImage(350, 350);
      assertEquals(350, realColorImage0.X());
      assertEquals(350, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      int int0 = 8;
      float float0 = (-32768.0F);
      RealGrayImage[] realGrayImageArray0 = new RealGrayImage[3];
      ROI rOI0 = new ROI(769, 769, 537, 8);
      assertEquals(537, rOI0.ux());
      assertEquals(8, rOI0.uy());
      assertEquals(769, rOI0.lx());
      assertEquals(769, rOI0.ly());
      assertEquals(762, rOI0.Y());
      assertEquals(233, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.add(8, 8, (-308.1F), 0.0F, (float) 8, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.add(3811, 3811, (Float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 0;
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      rOI0.setROI(0, 0, 0, (-1));
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals((-1), rOI0.uy());
      assertEquals(2, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        realColorImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[8];
      // Undeclared exception!
      try { 
        realColorImage0.add(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ROI rOI0 = new ROI(803, 803, 803, 1873);
      assertEquals(1, rOI0.X());
      assertEquals(803, rOI0.uy());
      assertEquals(1071, rOI0.Y());
      assertEquals(803, rOI0.ux());
      assertEquals(1873, rOI0.ly());
      assertEquals(803, rOI0.lx());
      assertNotNull(rOI0);
      
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.add(803, 804, (float[]) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      Float[] floatArray0 = new Float[0];
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.set(57, 57, floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.add(796, 796, (float) 796, (float) 796, (float) 796);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage();
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(realColorImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.maxComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(250, 250);
      assertEquals(250, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(250, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.get(2771, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2771
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      float[] floatArray0 = new float[1];
      // Undeclared exception!
      try { 
        realColorImage0.multiply(312, 312, floatArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 1);
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertNotNull(bufferedImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(bufferedImage0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(2, realColorImage1.Y());
      assertNotNull(realColorImage1);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(realColorImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(0, 0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      ImageProducer imageProducer0 = realColorImage1.getJavaImage();
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotSame(realColorImage1, realColorImage0);
      assertNotNull(imageProducer0);
      
      realColorImage1.planes = null;
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      
      ROI rOI0 = new ROI((-3891), (-3891), 255, 0);
      assertEquals(255, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals((-3891), rOI0.ux());
      assertEquals(3892, rOI0.Y());
      assertEquals((-3891), rOI0.uy());
      assertEquals(4147, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(16, 16, (float[]) null, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(0, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.add(842, 842, (float[]) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.absSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      int int0 = 71;
      int int1 = (-1117);
      float[] floatArray0 = new float[9];
      // Undeclared exception!
      try { 
        realColorImage0.add((RealColorImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage0.divide((-1196), (-1196), floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      Float float0 = realColorImage0.minComponent();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(32767.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      RealGrayImage realGrayImage0 = realColorImage0.plane(0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertNotNull(realGrayImage0);
      
      Float[] floatArray0 = realColorImage0.max();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(3, floatArray0.length);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      Float[] floatArray0 = new Float[5];
      Float float0 = new Float((double) 2321);
      assertEquals(2321.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) 3);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(3.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float(1.0);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float(255.0);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(255.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float((double) 2321);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals(2321.0F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      // Undeclared exception!
      try { 
        realColorImage0.set(2321, 3, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = (-13);
      int int1 = 1336;
      // Undeclared exception!
      try { 
        realColorImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      ColorModel colorModel0 = ColorModel.YIQ;
      realColorImage0.setColorModel(colorModel0);
      assertEquals(ColorModel.YIQ, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide((-1790.2668F), (-1790.2668F), 255.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      BufferedImage bufferedImage0 = new BufferedImage(2, 1, 1);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertNotNull(bufferedImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(bufferedImage0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(2, realColorImage1.X());
      assertEquals(1, realColorImage1.Y());
      assertNotNull(realColorImage1);
      
      RealColorImage realColorImage2 = realColorImage1.add(0.0F, (float) 2, 0.0F);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(2, realColorImage1.X());
      assertEquals(1, realColorImage1.Y());
      assertEquals(2, realColorImage2.X());
      assertEquals(1, realColorImage2.Y());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertNotSame(realColorImage1, realColorImage0);
      assertSame(realColorImage1, realColorImage2);
      assertSame(realColorImage2, realColorImage1);
      assertNotSame(realColorImage2, realColorImage0);
      assertNotNull(realColorImage2);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.clip(1604, 1604, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(782, 782);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(782, realColorImage1.Y());
      assertEquals(782, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      Float[] floatArray0 = realColorImage1.get(3, 3);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(782, realColorImage1.Y());
      assertEquals(782, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(3, floatArray0.length);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotNull(floatArray0);
      
      Float float0 = new Float((float) 782);
      assertEquals(782.0F, (float)float0, 0.01F);
      assertNotNull(float0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(2, (float) 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      int int0 = realColorImage0.X();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, int0);
      
      ColorModel colorModel0 = ColorModel.CMY;
      realColorImage0.setColorModel(colorModel0);
      assertEquals(ColorModel.CMY, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      // Undeclared exception!
      try { 
        realColorImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = (-1519);
      int int1 = 837;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1519);
      floatArray0[1] = (float) (-1300);
      floatArray0[2] = (float) 1576;
      floatArray0[3] = (float) 837;
      // Undeclared exception!
      try { 
        realColorImage0.multiply((-1300), 1576, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage0.multiply(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI((-166), 2685, 0, 0);
      assertEquals(2686, rOI0.Y());
      assertEquals(2685, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals((-166), rOI0.ux());
      assertEquals(167, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      rOI0.setROI(0, 2685, 0, 2685);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(2685, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(2685, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract((RealColorImage) null, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide((-5114), (-5114), (float) (-5114), (float) (-5114), (float) (-5114), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(765, 765);
      assertEquals(765, realColorImage0.X());
      assertEquals(765, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      int int0 = 0;
      RealColorImage realColorImage1 = new RealColorImage(0, 0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertNotNull(realColorImage1);
      
      DummyObserver dummyObserver0 = DummyObserver.dummy;
      assertNotNull(dummyObserver0);
      
      DummyObserver.dummy = dummyObserver0;
      DummyObserver.dummy = dummyObserver0;
      // Undeclared exception!
      realColorImage0.multiply(realColorImage1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.add(1, (float) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[7];
      ROI rOI0 = new ROI((-1418), 128, 437, 834);
      assertEquals(128, rOI0.uy());
      assertEquals(437, rOI0.lx());
      assertEquals(1856, rOI0.X());
      assertEquals(707, rOI0.Y());
      assertEquals((-1418), rOI0.ux());
      assertEquals(834, rOI0.ly());
      assertNotNull(rOI0);
      
      rOI0.setROI(8, 437, (-1418), 816);
      assertEquals(8, rOI0.lx());
      assertEquals(380, rOI0.Y());
      assertEquals(437, rOI0.uy());
      assertEquals((-1418), rOI0.ux());
      assertEquals(1427, rOI0.X());
      assertEquals(816, rOI0.ly());
      
      // Undeclared exception!
      try { 
        realColorImage0.min((-1418), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1418
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(0, 0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertNotNull(realColorImage1);
      
      int int0 = (-464);
      int int1 = (-3917);
      int int2 = 0;
      realColorImage1.planes = null;
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      
      int int3 = 2436;
      ROI rOI0 = new ROI((-3917), 0, 0, (-16777216));
      assertEquals((-3917), rOI0.ux());
      assertEquals((-16777216), rOI0.uy());
      assertEquals(3918, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(16777217, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage1.multiply(0, (float) 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.max(2, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = null;
      try {
        realColorImage1 = new RealColorImage(realColorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      ColorModel colorModel0 = ColorModel.HSV;
      realColorImage0.colorModel = colorModel0;
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.HSV, realColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        realColorImage0.get((-1329), (-708));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI(975, 975, 975, 16);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(975, rOI1.ly());
      assertEquals(975, rOI1.lx());
      assertEquals(975, rOI1.ux());
      assertEquals(16, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(960, rOI1.Y());
      assertNotNull(rOI1);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(realColorImage0, rOI0, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealGrayImage[] realGrayImageArray0 = new RealGrayImage[0];
      realColorImage0.planes = realGrayImageArray0;
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      // Undeclared exception!
      try { 
        realColorImage0.max((-925));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -925
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 838);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(838, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ImageProducer imageProducer0 = realColorImage0.getJavaImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(838, realColorImage0.Y());
      assertNotNull(imageProducer0);
      
      String string0 = realColorImage0.toString();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(838, realColorImage0.Y());
      assertEquals("0:838\n0:838\n0:838\n", string0);
      assertNotNull(string0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(0, 0, (float) 0, (float) 838, (-620.0F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-446);
      floatArray0[1] = (float) 16;
      floatArray0[2] = (-0.123149164F);
      // Undeclared exception!
      try { 
        realColorImage0.subtract((-1398), (-2157.7168F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1398
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      realColorImage0.planes = null;
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      // Undeclared exception!
      try { 
        realColorImage0.add(822, (float) 822, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      rOI0.setROI((-1259), 0, (-1259), (-1259));
      assertEquals(1260, rOI0.Y());
      assertEquals((-1259), rOI0.ux());
      assertEquals((-1259), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals((-1259), rOI0.lx());
      
      // Undeclared exception!
      try { 
        realColorImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealGrayImage[] realGrayImageArray0 = new RealGrayImage[0];
      realColorImage0.planes = realGrayImageArray0;
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.max(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 528.459F;
      floatArray0[1] = 746.936F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 3.4028235E38F;
      floatArray0[4] = 32767.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-3064.91F);
      floatArray0[8] = 0.0F;
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.add(floatArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage0.subtract((-16777216), 1438, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.add((RealColorImage) null, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(1, 0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      ImageProducer imageProducer0 = realColorImage0.getJavaImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertNotNull(imageProducer0);
      
      ROI rOI0 = new ROI((-3891), (-16777216), 8, 0);
      assertEquals(16777217, rOI0.Y());
      assertEquals((-3891), rOI0.ux());
      assertEquals(3900, rOI0.X());
      assertEquals((-16777216), rOI0.uy());
      assertEquals(8, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 255;
      floatArray0[1] = (float) (-3891);
      floatArray0[2] = (float) 0;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) (-16777216);
      RealColorImage realColorImage1 = realColorImage0.subtract(floatArray0);
      assertArrayEquals(new float[] {255.0F, (-3891.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1.6777216E7F)}, floatArray0, 0.01F);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1, realColorImage1.X());
      assertEquals(8, floatArray0.length);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertNotNull(realColorImage1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      RealColorImage realColorImage0 = new RealColorImage(0, 291);
      assertEquals(0, realColorImage0.X());
      assertEquals(291, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(0, realColorImage0.X());
      assertEquals(291, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(291, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      float[] floatArray0 = realColorImage1.absSum();
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(0, realColorImage0.X());
      assertEquals(291, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(291, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(3, floatArray0.length);
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealGrayImage[] realGrayImageArray0 = new RealGrayImage[0];
      realColorImage0.planes = realGrayImageArray0;
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        realColorImage0.copy();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(847, 847);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(847, realColorImage1.Y());
      assertEquals(847, realColorImage1.X());
      assertNotNull(realColorImage1);
      
      int int0 = realColorImage1.X();
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(847, realColorImage1.Y());
      assertEquals(847, realColorImage1.X());
      assertNotSame(realColorImage1, realColorImage0);
      assertEquals(847, int0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply((float) 847, 0.0F, (-1094.1407F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      Float[] floatArray0 = realColorImage0.min();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(3, floatArray0.length);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(0, 0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI(2436, 1879, 0, 255);
      assertEquals(2436, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(255, rOI0.uy());
      assertEquals(1625, rOI0.Y());
      assertEquals(2437, rOI0.X());
      assertEquals(1879, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage1.subtract(realColorImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(758, 758, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      Float[] floatArray0 = new Float[1];
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.set(102, 102, floatArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.sqrSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(1, (-753.38403F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide((-829), (float) (-829), (ROI) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -829
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      ColorModel colorModel0 = ColorModel.RGB;
      realColorImage0.setColorModel(colorModel0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      int int0 = (-4425);
      int int1 = 0;
      // Undeclared exception!
      try { 
        realColorImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[0];
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = (-5114);
      ROI rOI1 = new ROI(114, (-5114), (-1400), 114);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(114, rOI1.ly());
      assertEquals(114, rOI1.lx());
      assertEquals((-1400), rOI1.ux());
      assertEquals((-5114), rOI1.uy());
      assertEquals(1515, rOI1.X());
      assertEquals(5229, rOI1.Y());
      assertNotNull(rOI1);
      
      // Undeclared exception!
      realColorImage0.copy(rOI1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3498.0F);
      int int0 = 1045;
      int int1 = 16;
      ROI rOI0 = new ROI(1045, 745, 176, 16);
      assertEquals(745, rOI0.ly());
      assertEquals(16, rOI0.uy());
      assertEquals(176, rOI0.ux());
      assertEquals(730, rOI0.Y());
      assertEquals(1045, rOI0.lx());
      assertEquals(870, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(floatArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.min((-42), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -42
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(800, 800);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(800, realColorImage0.X());
      assertEquals(800, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 800;
      // Undeclared exception!
      try { 
        realColorImage0.subtract(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      RealColorImage realColorImage1 = new RealColorImage(0, 1);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(1, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      ImageProducer imageProducer0 = realColorImage1.getJavaImage();
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(1, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotSame(realColorImage1, realColorImage0);
      assertNotNull(imageProducer0);
      
      ROI rOI1 = new ROI(0, 388, (-1279), 8);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals((-1279), rOI1.ux());
      assertEquals(1280, rOI1.X());
      assertEquals(381, rOI1.Y());
      assertEquals(388, rOI1.ly());
      assertEquals(8, rOI1.uy());
      assertEquals(0, rOI1.lx());
      assertNotNull(rOI1);
      
      // Undeclared exception!
      try { 
        realColorImage1.clip(0, 1200, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      DummyObserver dummyObserver0 = DummyObserver.dummy;
      assertNotNull(dummyObserver0);
      
      Float float0 = realColorImage0.maxComponent();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals((-32768.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      int int0 = 0;
      int int1 = 2;
      ROI rOI0 = new ROI(0, 0, 0, 2);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(2, rOI0.ly());
      assertEquals(3, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int2 = (-815);
      rOI0.setROI(0, (-2344), (-815), 16);
      assertEquals(816, rOI0.X());
      assertEquals((-815), rOI0.ux());
      assertEquals(2361, rOI0.Y());
      assertEquals(16, rOI0.ly());
      assertEquals((-2344), rOI0.uy());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        realColorImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2344
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.add(805, (float) 805, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 805
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = null;
      try {
        realColorImage1 = new RealColorImage((-578), (-578));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI(816, 816, 816, 816);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(816, rOI1.ux());
      assertEquals(816, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(816, rOI1.ly());
      assertEquals(816, rOI1.lx());
      assertNotNull(rOI1);
      
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.add((-1056), 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1056
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(16, 16);
      assertEquals(16, realColorImage0.X());
      assertEquals(16, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(16, realColorImage0.X());
      assertEquals(16, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(16, realColorImage1.X());
      assertEquals(16, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      // Undeclared exception!
      try { 
        realColorImage1.subtract(2, 130, (float) 16, (float) 2, (-789.8225F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 130
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      RealGrayImage[] realGrayImageArray0 = new RealGrayImage[0];
      realColorImage0.planes = realGrayImageArray0;
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply((RealColorImage) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2373.5623F;
      int int0 = 1;
      ROI rOI0 = new ROI(1, 1, 1, 1);
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ly());
      assertNotNull(rOI0);
      
      int int1 = (-500);
      // Undeclared exception!
      try { 
        realColorImage0.diff((RealColorImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(0.0F, 0.0F, 992.27936F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      int int0 = 0;
      RealColorImage realColorImage1 = new RealColorImage(0, 0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage1.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(0, 0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertNotNull(realColorImage1);
      
      // Undeclared exception!
      try { 
        realColorImage1.divide((-530), (-3917), (float) (-530), (float) 0, 745.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3917
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2373.5623F;
      ROI rOI0 = new ROI(1, 1, 1, 1);
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(1, 1, (float) 1, (float) 1, 278.67F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage0.add(floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 4559.1F;
      rOI0.setROI(3, 3, 3, 3);
      assertEquals(3, rOI0.lx());
      assertEquals(3, rOI0.ly());
      assertEquals(3, rOI0.ux());
      assertEquals(3, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      RealColorImage realColorImage1 = new RealColorImage();
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      // Undeclared exception!
      try { 
        realColorImage1.divide(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      int int0 = (-1276);
      int int1 = 8;
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      rOI0.setROI(150, 150, 8, 8);
      assertEquals(150, rOI0.lx());
      assertEquals(150, rOI0.ly());
      assertEquals(143, rOI0.X());
      assertEquals(143, rOI0.Y());
      assertEquals(8, rOI0.ux());
      assertEquals(8, rOI0.uy());
      
      // Undeclared exception!
      try { 
        realColorImage0.get((-1276), 8, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(804, 3, 3);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(804, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(804, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getHeight());
      assertNotNull(bufferedImage0);
      
      RealColorImage realColorImage0 = new RealColorImage(bufferedImage0);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(804, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(804, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(3, realColorImage0.Y());
      assertEquals(804, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float((double) 804);
      assertEquals(804.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) 706);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(706.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      bufferedImage0.flush();
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(804, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(804, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getHeight());
      
      RealColorImage realColorImage1 = realColorImage0.subtract(0.0F, 0.0F, (float) floatArray0[0]);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(804, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(804, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(3, realColorImage0.Y());
      assertEquals(804, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(3, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(804, realColorImage1.X());
      assertEquals(9, floatArray0.length);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertNotNull(realColorImage1);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(804, (-931), 4558.656F, 3.4028235E38F, (float) (-931));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -931
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      int int0 = 8;
      int int1 = 5;
      int int2 = 682;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1089);
      floatArray0[1] = (float) 8;
      floatArray0[2] = (float) (-1089);
      floatArray0[3] = (float) 682;
      // Undeclared exception!
      try { 
        realColorImage0.divide(5, (-1089), floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(16, 16);
      assertEquals(16, realColorImage0.Y());
      assertEquals(16, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.add(realColorImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage0.add(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply((-810), (-810), (float) (-810), (float) (-810), (float) (-810));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract((float[]) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = (-1938.5F);
      floatArray0[3] = 605.0F;
      ROI rOI0 = new ROI((-54), 255, (-54), (-638));
      assertEquals(894, rOI0.Y());
      assertEquals((-54), rOI0.lx());
      assertEquals((-54), rOI0.ux());
      assertEquals(255, rOI0.ly());
      assertEquals((-638), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      Float[] floatArray1 = new Float[5];
      floatArray1[0] = (Float) 605.0F;
      floatArray1[1] = (Float) (-1938.5F);
      floatArray1[2] = (Float) (-1938.5F);
      floatArray1[3] = (Float) 605.0F;
      floatArray1[4] = (Float) 605.0F;
      // Undeclared exception!
      try { 
        realColorImage0.clear(floatArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(470, 470);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(470, realColorImage1.X());
      assertEquals(470, realColorImage1.Y());
      assertNotNull(realColorImage1);
      
      RealColorImage realColorImage2 = realColorImage1.copy();
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(470, realColorImage1.X());
      assertEquals(470, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(470, realColorImage2.Y());
      assertEquals(470, realColorImage2.X());
      assertNotSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage2, realColorImage0);
      assertNotSame(realColorImage2, realColorImage1);
      assertNotNull(realColorImage2);
      
      // Undeclared exception!
      try { 
        realColorImage1.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(3, (float) 3, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.toString(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      int int0 = (-1663);
      RealColorImage realColorImage1 = new RealColorImage();
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(realColorImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 811;
      floatArray0[1] = (float) 811;
      // Undeclared exception!
      realColorImage0.addbuffer(4190, 4190, 4190, 811, floatArray0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[1];
      // Undeclared exception!
      try { 
        realColorImage0.divide(60, 60, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(realColorImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(3678, 3678, (float[]) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage0.multiply(312, 312, floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(2692.3127F, 2692.3127F, 2692.3127F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI(803, 803, 803, 1873);
      assertEquals(1873, rOI0.ly());
      assertEquals(803, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1071, rOI0.Y());
      assertEquals(803, rOI0.uy());
      assertEquals(803, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(803, 803, (float[]) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[2];
      int int0 = (-2150);
      // Undeclared exception!
      try { 
        realColorImage0.subtract((-2150), (-2150), floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      float[] floatArray0 = new float[1];
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI(1584, 1584, (-2505), 8);
      assertEquals((-2505), rOI0.ux());
      assertEquals(1584, rOI0.lx());
      assertEquals(8, rOI0.uy());
      assertEquals(1584, rOI0.ly());
      assertEquals(4090, rOI0.X());
      assertEquals(1577, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(1584, (-2505), (float) (-2505), (float) 1584, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 838);
      assertEquals(838, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      String string0 = realColorImage0.toString();
      assertEquals(838, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals("0:838\n0:838\n0:838\n", string0);
      assertNotNull(string0);
      
      ROI rOI0 = new ROI(2147418112, (-3204), 805, 1659);
      assertEquals(4864, rOI0.Y());
      assertEquals(805, rOI0.ux());
      assertEquals(1659, rOI0.ly());
      assertEquals(2147418112, rOI0.lx());
      assertEquals((-3204), rOI0.uy());
      assertEquals(2147417308, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3204
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      int int0 = (-16777216);
      // Undeclared exception!
      try { 
        realColorImage0.get((-16777216), (-16777216));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      DummyObserver dummyObserver0 = new DummyObserver();
      assertNotNull(dummyObserver0);
      
      DummyObserver.dummy = dummyObserver0;
      DummyObserver.dummy = dummyObserver0;
      RealColorImage realColorImage1 = new RealColorImage(0, 0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertNotNull(realColorImage1);
      
      ImageProducer imageProducer0 = realColorImage1.getJavaImage();
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertNotSame(realColorImage1, realColorImage0);
      assertNotNull(imageProducer0);
      
      realColorImage1.planes = null;
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      
      ROI rOI0 = new ROI((-3891), (-3891), 255, 0);
      assertEquals(255, rOI0.lx());
      assertEquals(4147, rOI0.X());
      assertEquals((-3891), rOI0.ux());
      assertEquals((-3891), rOI0.uy());
      assertEquals(3892, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage0.clip(2290, 2290, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      Float[] floatArray0 = new Float[0];
      // Undeclared exception!
      try { 
        realColorImage0.set(14, 14, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(16, 16);
      assertEquals(16, realColorImage0.Y());
      assertEquals(16, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(16, realColorImage0.Y());
      assertEquals(16, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(16, realColorImage1.Y());
      assertEquals(16, realColorImage1.X());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI(16, 16, 16, 16);
      assertEquals(16, rOI0.lx());
      assertEquals(16, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(16, rOI0.uy());
      assertEquals(16, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage1.add(realColorImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getHeight());
      assertNotNull(bufferedImage0);
      
      RealColorImage realColorImage0 = new RealColorImage(bufferedImage0);
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      RealColorImage realColorImage2 = realColorImage1.copy();
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1, realColorImage2.X());
      assertEquals(1, realColorImage2.Y());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage2, realColorImage1);
      assertNotSame(realColorImage2, realColorImage0);
      assertNotNull(realColorImage2);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      realColorImage2.clip((-15), 1350, rOI0);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1, realColorImage2.X());
      assertEquals(1, realColorImage2.Y());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage2, realColorImage1);
      assertNotSame(realColorImage2, realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.get(5, (-608));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -608
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = (-1259);
      int int1 = 519;
      int int2 = 838;
      // Undeclared exception!
      try { 
        realColorImage0.sqrSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      RealColorImage realColorImage0 = null;
      try {
        realColorImage0 = new RealColorImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply((-3044), (-3044), (float) (-3044), (float) (-3044), (float) (-3044), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.add((float) 830, (float) 830, (float) 830, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ColorModel colorModel0 = ColorModel.RGB;
      realColorImage0.setColorModel(colorModel0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI(3678, 3678, 3678, 3678);
      assertEquals(3678, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(3678, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(3678, rOI0.uy());
      assertEquals(3678, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply((float) 3678, (float) 3678, (float) 3678, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(804, 3, 3);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(804, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(804, bufferedImage0.getTileWidth());
      assertEquals(3, bufferedImage0.getHeight());
      assertNotNull(bufferedImage0);
      
      RealColorImage realColorImage0 = new RealColorImage(bufferedImage0);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(804, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(804, bufferedImage0.getTileWidth());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(804, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(3, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI(1491, 3, 785, 785);
      assertEquals(707, rOI0.X());
      assertEquals(783, rOI0.Y());
      assertEquals(3, rOI0.uy());
      assertEquals(785, rOI0.ux());
      assertEquals(785, rOI0.ly());
      assertEquals(1491, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract((float) 3, (float) 1491, (-1835.6F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI((-1276), (-19), (-19), (-1276));
      assertEquals((-19), rOI0.lx());
      assertEquals(1258, rOI0.Y());
      assertEquals(1258, rOI0.X());
      assertEquals((-1276), rOI0.ux());
      assertEquals((-1276), rOI0.uy());
      assertEquals((-19), rOI0.ly());
      assertNotNull(rOI0);
      
      rOI0.setROI((-1276), 16, (-1276), 1406);
      assertEquals(1, rOI0.X());
      assertEquals(1391, rOI0.Y());
      assertEquals(16, rOI0.uy());
      assertEquals((-1276), rOI0.lx());
      assertEquals((-1276), rOI0.ux());
      assertEquals(1406, rOI0.ly());
      
      // Undeclared exception!
      try { 
        realColorImage0.max(1706, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1706
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(realColorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(1625, (-1821), (float) 1625, (float) 1625, (float) 1625);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(realColorImage0, (ROI) null, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = 2337;
      int int1 = (-3380);
      // Undeclared exception!
      try { 
        realColorImage0.divide(1078.0F, (-1.0F), (-1.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      int int0 = 943;
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      DummyObserver.dummy = null;
      RealColorImage realColorImage0 = new RealColorImage(943, 943);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(943, realColorImage0.X());
      assertEquals(943, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.clip(943, 943);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI(320, 320, 320, 320);
      assertEquals(320, rOI0.ux());
      assertEquals(320, rOI0.uy());
      assertEquals(320, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(320, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.get((-23), 320, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      int int0 = 4101;
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage0.addbuffer(16, 16, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(16, 16);
      assertEquals(16, realColorImage0.X());
      assertEquals(16, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI(16, 16, 2920, 16);
      assertEquals(16, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(2905, rOI0.X());
      assertEquals(16, rOI0.uy());
      assertEquals(2920, rOI0.lx());
      assertEquals(16, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply((-2136.8035F), 0.0F, 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int int0 = 4;
      int int1 = 4;
      RealColorImage realColorImage0 = new RealColorImage(4, 4);
      assertEquals(4, realColorImage0.Y());
      assertEquals(4, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      RealColorImage realColorImage1 = realColorImage0.copy(rOI0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(4, realColorImage0.Y());
      assertEquals(4, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1, realColorImage1.X());
      assertEquals(1, realColorImage1.Y());
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotNull(realColorImage1);
      
      // Undeclared exception!
      try { 
        realColorImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 8;
      // Undeclared exception!
      try { 
        realColorImage0.addbuffer(481, 481, 481, 8, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(1.4E-45F, 1.4E-45F, 1.4E-45F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(realColorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      realColorImage0.toString();
      realColorImage0.maxComponent();
      float[] floatArray0 = new float[6];
      realColorImage0.addbuffer(0, 476, 476, 0, floatArray0);
      realColorImage0.getJavaImage();
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      realColorImage0.getJavaImage();
      ROI rOI0 = new ROI(0, 0, 0, 0);
      rOI0.setROI(0, 123, 128, 0);
      rOI0.setROI(1054, 833, 3759, 476);
      rOI0.setROI(0, 128, 0, 803);
      // Undeclared exception!
      try { 
        realColorImage0.subtract(floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 128
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      ROI rOI0 = new ROI();
      int int0 = 975;
      ROI rOI1 = new ROI(975, 975, (-13), (-13));
      // Undeclared exception!
      try { 
        realColorImage0.addSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        realColorImage0.add(943, (float) 943, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 943
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      // Undeclared exception!
      try { 
        realColorImage0.divide(689, 689, (float) 689, 0.6844908F, 0.6844908F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(16, 16);
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI();
      // Undeclared exception!
      try { 
        realColorImage0.divide(810, 1312, 1932.6986F, 1932.6986F, (float) 16, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1312
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      ROI rOI0 = new ROI();
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage0.add(808, 808, floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      RealColorImage realColorImage1 = new RealColorImage(308, 308);
      ColorModel colorModel0 = ColorModel.YIQ;
      realColorImage1.colorModel = colorModel0;
      ROI rOI0 = new ROI(308, (-982), (-1442), (-1442));
      // Undeclared exception!
      try { 
        realColorImage1.add(0.0F, 0.0F, (float) 16, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1442
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        realColorImage0.divide((-753.38403F), (-753.38403F), (-753.38403F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      // Undeclared exception!
      try { 
        realColorImage0.divide(realColorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        realColorImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      float[] floatArray0 = new float[6];
      // Undeclared exception!
      try { 
        realColorImage0.max(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      // Undeclared exception!
      try { 
        realColorImage0.max();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      // Undeclared exception!
      try { 
        realColorImage0.minComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 838);
      realColorImage0.getJavaImage();
      ROI rOI0 = new ROI(838, (-3563), 0, (-3563));
      assertEquals(838, rOI0.lx());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      int int0 = 8;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 8;
      floatArray0[1] = (float) 8;
      floatArray0[2] = (float) 8;
      floatArray0[3] = (float) 8;
      floatArray0[4] = (float) 8;
      floatArray0[5] = (float) 8;
      int int1 = (-4351);
      int int2 = 2147418112;
      ROI rOI0 = new ROI((-4351), 2091, 2147418112, 8);
      // Undeclared exception!
      try { 
        realColorImage0.subtract(8, 8, floatArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      ROI rOI0 = new ROI(1491, 1491, 1491, 1491);
      // Undeclared exception!
      try { 
        realColorImage0.subtract((-3735.06F), 1.0F, (-3735.06F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage0.subtract(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage0.multiply(128, 758, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      // Undeclared exception!
      try { 
        realColorImage0.subtract(0.0F, 0.0F, 913.5742F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      // Undeclared exception!
      try { 
        realColorImage0.multiply(0, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        realColorImage0.subtract(realColorImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      int int0 = (-426);
      int int1 = 3016;
      RealColorImage realColorImage0 = null;
      try {
        realColorImage0 = new RealColorImage((-426), 3016);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      ROI rOI0 = new ROI();
      RealGrayImage[] realGrayImageArray0 = new RealGrayImage[0];
      realColorImage0.planes = realGrayImageArray0;
      // Undeclared exception!
      try { 
        realColorImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage0.divide(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        realColorImage0.subtract(838, 838, (float) 838, (float) 838, (float) 838, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      // Undeclared exception!
      try { 
        realColorImage0.min(689);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 689
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      int int0 = 3552;
      RealColorImage realColorImage0 = new RealColorImage(2775, 255);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 3552;
      floatArray0[1] = (float) 2775;
      floatArray0[2] = (float) 255;
      floatArray0[3] = (float) 3552;
      floatArray0[4] = (float) 3552;
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        realColorImage0.multiply(floatArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(16, 0);
      assertEquals(0, realColorImage0.Y());
      
      RealColorImage realColorImage1 = realColorImage0.add((float) 16, (-1730.9889F), (-1730.9889F));
      assertEquals(16, realColorImage1.X());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        realColorImage0.multiply((float[]) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      // Undeclared exception!
      try { 
        realColorImage0.add((-810), 5, (float) 5, (float) 5, (float) 5, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      ROI rOI0 = new ROI();
      float[] floatArray0 = new float[6];
      RealColorImage realColorImage1 = new RealColorImage();
      // Undeclared exception!
      try { 
        realColorImage1.subtract(1013.54F, 0.0F, 4559.1F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      Float[] floatArray0 = new Float[0];
      // Undeclared exception!
      try { 
        realColorImage0.add((-1800), (-1800), floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      float[] floatArray0 = new float[0];
      ROI rOI0 = new ROI(8, 815, (-1605), (-447));
      // Undeclared exception!
      try { 
        realColorImage0.subtract(8, 8, floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      // Undeclared exception!
      try { 
        realColorImage0.add(838, (float) 838);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 838
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        realColorImage0.multiply(2, (float) 4101, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      ROI rOI0 = new ROI();
      RealColorImage realColorImage1 = new RealColorImage(830, 816);
      RealColorImage realColorImage2 = new RealColorImage(8, 816);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 8;
      floatArray0[1] = (float) 816;
      floatArray0[2] = (float) 816;
      floatArray0[3] = (float) 816;
      realColorImage2.addbuffer(329, 8, floatArray0);
      // Undeclared exception!
      try { 
        realColorImage2.add((float) 830, (float) 8, (float) 830, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 838);
      realColorImage0.getJavaImage();
      realColorImage0.minComponent();
      realColorImage0.toString();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        realColorImage0.subtract(0, 815, (float) 815, (float) 838, (-620.0F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      ROI rOI0 = new ROI(2069, 1657, (-356), 777);
      // Undeclared exception!
      try { 
        realColorImage0.subtract(777, (-1636.0F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 777
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      ColorModel colorModel0 = ColorModel.RGB;
      realColorImage0.setColorModel(colorModel0);
      int int0 = (-4425);
      int int1 = 0;
      ROI rOI0 = new ROI((-4425), (-4425), 0, 0);
      DummyObserver dummyObserver0 = DummyObserver.dummy;
      DummyObserver.dummy = dummyObserver0;
      // Undeclared exception!
      try { 
        realColorImage0.maxComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      // Undeclared exception!
      try { 
        realColorImage0.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      int int0 = 128;
      RealColorImage realColorImage0 = new RealColorImage(128, 128);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 128;
      floatArray0[1] = (float) 128;
      floatArray0[2] = (float) 128;
      floatArray0[3] = (float) 128;
      floatArray0[4] = (float) 128;
      floatArray0[5] = (float) 128;
      ROI rOI0 = new ROI();
      realColorImage0.toString(rOI0);
      floatArray0[6] = (float) 128;
      ROI rOI1 = new ROI();
      // Undeclared exception!
      try { 
        realColorImage0.subtract(floatArray0, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      // Undeclared exception!
      try { 
        realColorImage0.add((float) 838, (float) 838, (float) 838);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        realColorImage0.byteSize(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      ROI rOI0 = new ROI();
      RealColorImage realColorImage0 = new RealColorImage(0, 16);
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      RealColorImage realColorImage2 = new RealColorImage();
      // Undeclared exception!
      try { 
        realColorImage1.divide(realColorImage2, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      // Undeclared exception!
      try { 
        realColorImage0.divide(798, (float) 798);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 798
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      float[] floatArray0 = new float[1];
      // Undeclared exception!
      try { 
        realColorImage0.divide(floatArray0, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      // Undeclared exception!
      try { 
        realColorImage0.absSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      int int0 = (-252);
      // Undeclared exception!
      try { 
        realColorImage0.add(0.0F, 3779.8838F, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      int int0 = 4101;
      DummyObserver dummyObserver0 = new DummyObserver();
      DummyObserver.dummy = dummyObserver0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 4101;
      floatArray0[1] = (float) 4101;
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        realColorImage0.multiply(4101, (-730), floatArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      RealColorImage realColorImage1 = new RealColorImage();
      int int0 = 0;
      float float0 = 0.0F;
      int int1 = (-117);
      ROI rOI0 = new ROI((-117), 0, (-117), (-117));
      int int2 = 2422;
      int int3 = 319;
      RealGrayImage[] realGrayImageArray0 = new RealGrayImage[7];
      realColorImage1.plane(0);
      realGrayImageArray0[0] = null;
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      int int0 = 0;
      int int1 = (-1);
      ROI rOI0 = new ROI((-2907), 798, (-1), (-1));
      RealColorImage realColorImage1 = new RealColorImage(0, 1430);
      // Undeclared exception!
      realColorImage1.copy();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      int int0 = 5128;
      RealColorImage realColorImage0 = new RealColorImage(5128, 5128);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      ROI rOI0 = new ROI();
      RealColorImage realColorImage0 = new RealColorImage(3, 3);
      // Undeclared exception!
      try { 
        realColorImage0.get(3, 2132);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2132
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      // Undeclared exception!
      try { 
        realColorImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI();
      RealColorImage realColorImage0 = new RealColorImage(57, 57);
      realColorImage0.clear();
      assertEquals(57, realColorImage0.Y());
      assertEquals(57, realColorImage0.X());
  }
}
